# -*- coding: utf-8 -*-
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, ChatMemberStatus
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from sqlalchemy import create_engine, Column, Integer, String, Boolean, select, ForeignKey
from sqlalchemy.orm import sessionmaker, relationship
from sqlalchemy.ext.declarative import declarative_base



# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–æ–º–æ—â–∏ ORM
host = 'eporqep6b4b8ql12.chr7pe7iynqr.eu-west-1.rds.amazonaws.com'
username = 'hit9za4dgrwewfx1'
password = 'bs8790sarceyn0hv'
database = 'g09lyqcrg09g5exs'
engine = create_engine(f'mysql://{username}:{password}@{host}/{database}')

#–±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –º–æ–¥–µ–ª–∏
Base = declarative_base()



#—Å–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Ç–∞–±–ª–∏—Ü—ã
class InformationAboutUsers(Base):
    __tablename__ = 'information_about_users'
    id = Column(Integer, primary_key=True)
    is_owner = Column(Boolean, default=False)
    username = Column(String(255))
    first_name = Column(String(255))
    last_name = Column(String(255))

class Question(Base):
    __tablename__ = 'questions'
    id = Column(Integer, primary_key=True)
    text = Column(String)

class UserAnswer(Base):
    __tablename__ = 'user_answers'

    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, ForeignKey('information_about_users.id'))
    question_id = Column(Integer, ForeignKey('questions.id'))
    answer = Column(String)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–Ω–æ—à–µ–Ω–∏—è –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏
    user = relationship("InformationAboutUsers", back_populates="answers")
    question = relationship("Question")

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –¥–ª—è —Å–≤—è–∑–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ—Ç–≤–µ—Ç–∞–º–∏
InformationAboutUsers.answers = relationship("UserAnswer", back_populates="user")

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç)
Base.metadata.create_all(engine)



#—Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
Session = sessionmaker(bind=engine)
session = Session()

#—Ç–æ–∫–µ–Ω –∏ –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞, –æ–±—ä–µ–∫—Ç —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –ø–∞–º—è—Ç–∏, –¥–∏—Å–ø–µ—Ç—á–µ—Ä (–∫–æ–ª–±—ç–∫–æ–≤, —Å–æ–æ–±—â–µ–Ω–∏–π, —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏ —Ç–¥)
token = '7067592422:AAF-ch8SK5asSyxYmY-hEz6TcQ8vz6aJRZU'
bot = Bot(token=token)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

#—Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã
button_agree_text = '–î–∞'
button_disagree_text = '–ù–µ—Ç'
button_main_agree_text = '‚úÖ –î–∞, —Ö–æ—á—É'
button_main_disagree_text = '‚ùå –ù–µ—Ç, –Ω–µ —Ö–æ—á—É'
end_survey_text = 'üö´ –ó–∞–∫–æ–Ω—á–∏—Ç—å –æ–ø—Ä–æ—Å'
back_to_survey_text = '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–Ω–∫–µ—Ç–µ'
back = '‚¨ÖÔ∏è –ù–∞–∑–∞–¥'
cancel = 'üö´ –û—Ç–º–µ–Ω–∞'
survey_is_finished_text = '–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ–µ –ø–æ–∑–¥–Ω–µ–µ, –µ—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ.'
survey_is_in_progress_text = f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –í—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –¥–∞—Ç—å –æ—Ç–≤–µ—Ç –∏–ª–∏ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:'
main_menu_text = '–ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é, –Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã, –ø–æ –∫–æ—Ç–æ—Ä—ã–º —Å–æ –º–Ω–æ–π –º–æ–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è, –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ—ë.'
arrow_up_text = "‚¨ÜÔ∏è"
arrow_down_text = "‚¨áÔ∏è"


#–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
#chat_id = -4139713338

chat_id = -1001670079714
current_part_of_survey = 0
commands = ['start', 'open', 'go']
chosen_subtopics = []
list_of_choices = ''
current_menu = 0
main_menu_buttons = ["‚ú® –ó–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é","üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã","üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç—ã","‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã"]
main_menu_buttons_for_owners = ["–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π","–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è","–î–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"]
back_to_survey_buttons_dict = {back_to_survey_text: 'back_to_survey',
                                   end_survey_text: 'finish_survey'}

fastest_way_to_answer = {'WhatsApp':'whatsapp',
                         'Telegram':'telegram',
                         'Mail':'mail'}

yes_no_partially_buttons_dict = {button_agree_text: 'answer_yes_button',
                             button_disagree_text: 'answer_no_button',
                             "–ß–∞—Å—Ç–∏—á–Ω–æ": 'answer_partially_button',}

consultations_types = {'–¢–∞—Ä–æ':'service_1',
                       '–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è':'service_2',
                       '–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ —á–∏—Å—Ç–∫–∏':'service_3',
                       '–ú–µ–¥–∏—Ç–∞—Ü–∏–∏':'service_4',
                        '–ê–∫—Ç–∏–≤–∞—Ü–∏–∏':'service_5',
                       '–ù–∞—Å—Ç—Ä–æ–π–∫–∏':'service_6',
                       '–†–∞–±–æ—Ç–∞ —Å –†–æ–¥–æ–º':'service_7',
                       '–ê–Ω–≥–µ–ª—å—Å–∫–∞—è —Ç–µ—Ä–∞–ø–∏—è':'service_8'}

prefered_way_to_communicate = {'–û–Ω–ª–∞–π–Ω':'online',
                               '–û—Ñ–ª–∞–π–Ω':'offline',
                               '–í–∏–¥–µ–æ—Å–≤—è–∑—å':'video',
                               '–ê—É–¥–∏–æ':'audio',
                               '–ü–∏—Å—å–º–µ–Ω–Ω–æ':'text'}

out_of_ten_scale = {'1':'1',
                    '2':'2',
                    '3':'3',
                    '4':'4',
                    '5':'5',
                    '6':'6',
                    '7':'7',
                    '8':'8',
                    '9':'9',
                    '10':'10'}

methods_dict = {"–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è":'method_1',
                "–¢–∞—Ä–æ":'method_2'}

topics_dict = {"–í–æ–ø—Ä–æ—Å—ã –ª–∏—á–Ω–æ—Å—Ç–∏":'topic_1',
                "–î–µ–Ω—å–≥–∏, —Ñ–∏–Ω–∞–Ω—Å—ã, —Ä–∞–±–æ—Ç–∞, –±–∏–∑–Ω–µ—Å":'topic_2',
                "–ö–æ–Ω—Ç–∞–∫—Ç—ã, —Å–≤—è–∑–∏, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":'topic_3',
                "–î–æ–º, —Å–µ–º—å—è, —Ä–æ–¥, –ø—Ä–æ—à–ª–æ–µ":'topic_4',
                "–õ—é–±–æ–≤—å, –æ—Ç–Ω–æ—à–µ–Ω–∏—è, –¥–µ—Ç–∏, —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ":'topic_5',
                "–ó–¥–æ—Ä–æ–≤—å–µ":'topic_6',
                "–ë—Ä–∞–∫, –ø–∞—Ä—Ç–Ω—ë—Ä—ã, –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è, —Å–æ–ø–µ—Ä–Ω–∏—Ü—ã":'topic_7',
                "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –Ω–µ–≥–∞—Ç–∏–≤–∞, —Ç–∞–π–Ω, –Ω–∞—Å–ª–µ–¥—Å—Ç–≤–æ, –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏–∏":'topic_8',
                "–ü–µ—Ä–µ–µ–∑–¥—ã, –ø–∞—Ä—Ç–Ω–µ—Ä—ã –∏–∑-–∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã, —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π, –¥—É—Ö–æ–≤–Ω—ã–π —Ä–æ—Å—Ç":'topic_9',
                "–ö–∞—Ä—å–µ—Ä–∞, –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, –∂–∏–∑–Ω–µ–Ω–Ω—ã–π —É—Å–ø–µ—Ö":'topic_10',
                "–ö–æ–ª–ª–µ–∫—Ç–∏–≤—ã, –∫–æ—Ä—Ä–µ–∫—Ü–∏—è —Å—É–¥—å–±—ã, –ø—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ –±—É–¥—É—â–µ–µ":'topic_11',
                "–ü–æ–∏—Å–∫ –ø—Ä–æ–ø–∞–≤—à–∏—Ö –≤–µ—â–µ–π, –≤—Å–µ, —á—Ç–æ –∫–∞—Å–∞–µ—Ç—Å—è —Ç–∞–π–Ω—ã—Ö –¥–µ–ª, —Ä–∞–∑–æ–±–ª–∞—á–µ–Ω–∏—è. –í–æ–ø—Ä–æ—Å—ã –æ —Ç—é—Ä—å–º–µ, –ø—Å–∏—Ö–∏—á–µ—Å–∫–∏—Ö –±–æ–ª–µ–∑–Ω—è—Ö, –∫–∞—Ä–º–∞":'topic_12',
                '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–µ –±–∏–∑–Ω–µ—Å-–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ "–£–î–ê–ß–ê –ø—Ä–∏—Ç—è–≥–∏–≤–∞–µ—Ç –£–°–ü–ï–•"':'topic_13',
                }

topics_dict_for_corps = {"–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –º–∞–≥–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –í–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏":'topic_14',
                         "–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏–π":'topic_15',}

subtopics_dict_1 = {"–í–æ–ø—Ä–æ—Å—ã –ª–∏—á–Ω–æ—Å—Ç–∏":{"–ö—Ç–æ –í—ã –µ—Å—Ç—å –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ":'subtopic_1',
                                        "–°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ":'subtopic_2',
                                        "–ü—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ":'subtopic_3',
                                        "–õ—É—á—à–∏–µ —á–µ—Ä—Ç—ã, —á—Ç–æ –Ω—É–∂–Ω–æ —Ä–∞–∑–≤–∏–≤–∞—Ç—å":'subtopic_4',}}

subtopics_dict_2 = {'–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–µ –±–∏–∑–Ω–µ—Å-–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ "–£–î–ê–ß–ê –ø—Ä–∏—Ç—è–≥–∏–≤–∞–µ—Ç –£–°–ü–ï–•"':{"–ë–∏–∑–Ω–µ—Å-–∫–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥":'subtopic_1',
                                                                                      "–ö—Ä–∏–∑–∏—Å-–º–µ–Ω–µ–¥–∂–µ—Ä":'subtopic_2',
                                                                                      "–ú–∞–≥–∏—á–µ—Å–∫–∏–π –ê–¥–≤–æ–∫–∞—Ç":'subtopic_3',
                                                                                      "–ù–µ—Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π –¢—Ä–µ–π–¥–∏–Ω–≥":'subtopic_4',
                                                                                      "–°–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ —Å—É–¥–µ–±–Ω—ã—Ö —Ç—è–∂–±":'subtopic_5',
                                                                                      "–°–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –∫—Ä—É–ø–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ (–Ω–µ–æ–±—ã—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞)":'subtopic_6',
                                                                                      "–ê—Å—Ç—Ä–æ-—Ç–∞—Ä–æ-–ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å –∏ –∫–æ–º–ø–µ–Ω—Å–∞—Ç–æ—Ä–∏–∫–∞":'subtopic_7',}}

subtopics_dict_3 = {'–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –º–∞–≥–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –í–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏':{"–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –ª—é–±–æ–π —Å—Ä–æ–∫":'subtopic_1',
                                                                        "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã":'subtopic_2',
                                                                        " –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç, –ø–æ –ª—é–±–æ–º—É —á–µ–ª–æ–≤–µ–∫—É –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è (—Å–µ–º—å—è, –ø–∞—Ä—Ç–Ω–µ—Ä—ã –ø–æ –±–∏–∑–Ω–µ—Å—É, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏, –ª—é–±–æ–≤–Ω–∏–∫–∏..)":'subtopic_3',
                                                                        "–°—É–¥–µ–±–Ω—ã–µ, —Å–ø–æ—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã":'subtopic_4',
                                                                        "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –ø–æ—à–∞–≥–æ–≤–æ–µ –≤–µ–¥–µ–Ω–∏–µ –ø–æ —Ç—Ä—É–¥–Ω—ã–º —É—á–∞—Å—Ç–∫–∞–º –ø—É—Ç–∏":'subtopic_5',
                                                                        "–°–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –∫—Ä—É–ø–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ (–Ω–µ–æ–±—ã—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞)":'subtopic_6',
                                                                        "–ê—Å—Ç—Ä–æ-—Ç–∞—Ä–æ-–ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å –∏ –∫–æ–º–ø–µ–Ω—Å–∞—Ç–æ—Ä–∏–∫–∞":'subtopic_7',}}

subtopics_dict_4 = {'–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏–π':{"–ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã":'subtopic_1',
                                                             "–ì–µ–æ–ø–æ–ª–∏—Ç–∏–∫–∞":'subtopic_2',
                                                             "–≠–∫–æ–Ω–æ–º–∏–∫–∞":'subtopic_3',
                                                             "–ú–∏—Ä–æ–≤—ã–µ —Ñ–∏–Ω–∞–Ω—Å—ã":'subtopic_4',
                                                             "–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å":'subtopic_5',
                                                             "–ü–æ–±–µ–¥–∞ –Ω–∞ –≤—ã–±–æ—Ä–∞—Ö":'subtopic_6',}}

#—Å–æ—Å—Ç–æ—è–Ω–∏—è
class Form(StatesGroup):
    waiting_for_question = State()
    waiting_for_answer = State()
    waiting_for_button = State()
    waiting_for_insert = State()
    waiting_for_method = State()
    waiting_for_topic = State()
    waiting_for_subtopic = State()
    waiting_for_insert_admin = State()



#—Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—é—â–∏—Ö –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
random_answer_expected_questions = ['–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –í–∞—à–µ –∏–º—è:',
                                    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –í–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è:',
                                    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –≥–æ—Ä–æ–¥ –∏ —Å—Ç—Ä–∞–Ω—É –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è:',
                                    '–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –í–∞—à —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –ø–æ—á—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å:',
                                    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Å –í–∞–º–∏ –º–æ–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è –≤ WhatsApp:',
                                    '–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á–µ–º –í—ã –∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å?',
                                    '–ö–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –í—ã –æ–∂–∏–¥–∞–µ—Ç–µ –æ—Ç –Ω–∞—à–µ–π —Å –≤–∞–º–∏ —Ä–∞–±–æ—Ç—ã?',
                                    '–ü–æ—á–µ–º—É –í—ã —Ä–µ—à–∏–ª–∏ –ø–æ–π—Ç–∏ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é/–Ω–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ –∏–º–µ–Ω–Ω–æ –∫–æ –º–Ω–µ?',
                                    '–ü–æ—á–µ–º—É –º–Ω–µ —Å—Ç–æ–∏—Ç –≤–∑—è—Ç—å –∏–º–µ–Ω–Ω–æ –í–∞—Å?']
#—Å–ø–∏—Å–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
questions_part_1 = {'–í–∞—à–µ –∏–º—è':'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –í–∞—à–µ –∏–º—è:', '–í–∞—à–∞ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è':'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –í–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è:',
                    '–ì–æ—Ä–æ–¥, —Å—Ç—Ä–∞–Ω–∞':'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –≥–æ—Ä–æ–¥ –∏ —Å—Ç—Ä–∞–Ω—É –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è:',
                    '–í–∞—à —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –ø–æ—á—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å':'–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –í–∞—à —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –ø–æ—á—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å:',
                    '–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ WhatsApp':'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Å –í–∞–º–∏ –º–æ–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è –≤ WhatsApp:',
                    '–ù–∞–∏–±–æ–ª–µ–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏':'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –Ω–∞–∏–±–æ–ª–µ–µ —É–¥–æ–±–Ω—ã–π –¥–ª—è –≤–∞—Å —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏, –≥–¥–µ –≤—ã –±—ã—Å—Ç—Ä–µ–µ –≤—Å–µ–≥–æ —É–≤–∏–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ):'}

questions_part_2 = {'–í–∞—à –≤–æ–ø—Ä–æ—Å –∫–∞—Å–∞–µ—Ç—Å—è –ª–∏—á–Ω–æ–π –∂–∏–∑–Ω–∏?':'–í–∞—à –≤–æ–ø—Ä–æ—Å –∫–∞—Å–∞–µ—Ç—Å—è –ª–∏—á–Ω–æ–π –∂–∏–∑–Ω–∏?',
                    '–í–∞—à –≤–æ–ø—Ä–æ—Å –∫–∞—Å–∞–µ—Ç—Å—è –±–∏–∑–Ω–µ—Å–∞, —Ä–∞–±–æ—Ç—ã, —Ñ–∏–Ω–∞–Ω—Å–æ–≤?':'–í–∞—à –≤–æ–ø—Ä–æ—Å –∫–∞—Å–∞–µ—Ç—Å—è –±–∏–∑–Ω–µ—Å–∞, —Ä–∞–±–æ—Ç—ã, —Ñ–∏–Ω–∞–Ω—Å–æ–≤?',
                    '–í–∞—à –≤–æ–ø—Ä–æ—Å –∫–∞—Å–∞–µ—Ç—Å—è –∑–¥–æ—Ä–æ–≤—å—è?':'–í–∞—à –≤–æ–ø—Ä–æ—Å –∫–∞—Å–∞–µ—Ç—Å—è –∑–¥–æ—Ä–æ–≤—å—è?',
                    '–í–∞—à –≤–æ–ø—Ä–æ—Å –∫–∞—Å–∞–µ—Ç—Å—è –¥—É—Ö–æ–≤–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞ –∏ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è?':'–í–∞—à –≤–æ–ø—Ä–æ—Å –∫–∞—Å–∞–µ—Ç—Å—è –¥—É—Ö–æ–≤–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞ –∏ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è?',
                    '–í–∞—à –≤–æ–ø—Ä–æ—Å –∫–∞—Å–∞–µ—Ç—Å—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏?':'–í–∞—à –≤–æ–ø—Ä–æ—Å –∫–∞—Å–∞–µ—Ç—Å—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏?'}

questions_part_3 = {'–í–∞—à —Ä–æ–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏':'–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á–µ–º –í—ã –∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å?',
                    '–í–∞—à–∏ –æ–∂–∏–¥–∞–Ω–∏—è':'–ö–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –í—ã –æ–∂–∏–¥–∞–µ—Ç–µ –æ—Ç –Ω–∞—à–µ–π —Å –≤–∞–º–∏ —Ä–∞–±–æ—Ç—ã?',
                    '–ü–æ—á–µ–º—É —Ä–µ—à–∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫–æ –º–Ω–µ':'–ü–æ—á–µ–º—É –í—ã —Ä–µ—à–∏–ª–∏ –ø–æ–π—Ç–∏ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é/–Ω–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ –∏–º–µ–Ω–Ω–æ –∫–æ –º–Ω–µ?',
                    '–ü–æ—á–µ–º—É –º–Ω–µ —Å—Ç–æ–∏—Ç –≤–∑—è—Ç—å –∏–º–µ–Ω–Ω–æ –í–∞—Å':'–ü–æ—á–µ–º—É –º–Ω–µ —Å—Ç–æ–∏—Ç –≤–∑—è—Ç—å –∏–º–µ–Ω–Ω–æ –í–∞—Å?'}

questions_part_4 = {'–ö–∞–∫–æ–π –≤–∏–¥ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å?':'–ö–∞–∫–æ–π –≤–∏–¥ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å? (–≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ)',
                    '–ö–∞–∫–æ–π –≤–∏–¥ –æ–±—â–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?':'–ö–∞–∫–æ–π –≤–∏–¥ –æ–±—â–µ–Ω–∏—è –í—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ? (–≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ):',
                    '–ü–æ–Ω—è—Ç–∏–µ —ç–Ω–µ—Ä–≥–æ—Ü–µ–Ω–Ω–æ—Å—Ç–∏':'–í–∞–º –∏–∑–≤–µ—Å—Ç–Ω–æ –ø–æ–Ω—è—Ç–∏–µ —ç–Ω–µ—Ä–≥–æ—Ü–µ–Ω–Ω–æ—Å—Ç—å?',
                    '–°—Ç–µ–ø–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è':'–ù–∞—Å–∫–æ–ª—å–∫–æ –≤—ã –≥–æ—Ç–æ–≤—ã –¥–æ–≤–µ—Ä–∏—Ç—å—Å—è –º–Ω–µ? (–ø–æ 10-–±–∞–ª–ª—å–Ω–æ–π —à–∫–∞–ª–µ)'}

all_questions_dict = {'questions_part_1':questions_part_1,
                      'questions_part_2':questions_part_2,
                      'questions_part_3':questions_part_3,
                      'questions_part_4':questions_part_4,
                      }


#—Ç–µ–∫—É—â–∞—è —á–∞—Å—Ç—å –∞–Ω–∫–µ—Ç—ã
def process_current_questions_part_status(arg):
    current_part_of_survey_status = f'({arg}/{len(all_questions_dict)})'
    return current_part_of_survey_status


#—Å–µ–∫—Ü–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–º–∏
button_main_agree = KeyboardButton(button_main_agree_text)
button_main_disagree = KeyboardButton(button_main_disagree_text)
greet_kb = ReplyKeyboardMarkup(resize_keyboard=True)
greet_kb.row(button_main_agree, button_main_disagree)

#–≤—ã–≤–æ–¥–∏—Ç —á–∞—Å—Ç—å –∞–Ω–∫–µ—Ç—ã + –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏
def survey_part():
    global inline_button_questions_and_callbacks_dict
    inline_button_questions_and_callbacks_dict = {}
    inline_kb_survey = InlineKeyboardMarkup()
    if current_part_of_survey > 1:
        inline_kb_survey.add(InlineKeyboardButton(arrow_up_text, callback_data='prev_part_of_survey'))
    global questions_part
    questions_part = f'questions_part_{current_part_of_survey}'

    if current_part_of_survey == 1:
        questions_part = questions_part_1
    elif current_part_of_survey == 2:
        questions_part = questions_part_2
    elif current_part_of_survey == 3:
        questions_part = questions_part_3
    elif current_part_of_survey == 4:
        questions_part = questions_part_4


    for index, (key, value) in enumerate(questions_part.items()):
        callback_data = f'question_{index}'
        button = InlineKeyboardButton(text=key, callback_data=callback_data)
        inline_button_questions_and_callbacks_dict.update({value: callback_data})
        inline_kb_survey.add(button)
    if current_part_of_survey < 5:
        inline_kb_survey.add(InlineKeyboardButton(text=arrow_down_text, callback_data='next_part_of_survey'))
    inline_kb_survey.add(InlineKeyboardButton(text=end_survey_text, callback_data='finish_survey'))
    return inline_kb_survey

#–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å "—Å–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏"
def fastest_way_to_answer_menu():
    keyboard = InlineKeyboardMarkup()
    for key, value in fastest_way_to_answer.items():
        keyboard.add(InlineKeyboardButton(text=key, callback_data=value))
    row = []
    for key, value in back_to_survey_buttons_dict.items():
        row.append(InlineKeyboardButton(text=key, callback_data=value))
        if len(row) == 2:
            keyboard.add(*row)
            row = []
    return keyboard

#–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –æ—Ç–≤–µ—Ç–∞–º–∏ "–¥–∞/–Ω–µ—Ç/—á–∞—Å—Ç–∏—á–Ω–æ"
def yes_no_partially_menu():
    keyboard = InlineKeyboardMarkup()
    row = []
    for key, value in yes_no_partially_buttons_dict.items():
        row.append(InlineKeyboardButton(text=key, callback_data=value))
        if len(row) == 3:
            keyboard.add(*row)
            row = []
    for key, value in back_to_survey_buttons_dict.items():
        row.append(InlineKeyboardButton(text=key, callback_data=value))
        if len(row) == 2:
            keyboard.add(*row)
            row = []
    return keyboard

#–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ "–∫–∞–∫–æ–π —Ç–∏–ø –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø—Ä–æ–¥–ø–æ—á—Ç–∏—Ç–µ–ª–µ–Ω"
def consultations_types_menu():
    keyboard = InlineKeyboardMarkup()
    for key, value in consultations_types.items():
        keyboard.add(InlineKeyboardButton(text=key, callback_data=value))
    row = []
    for key, value in back_to_survey_buttons_dict.items():
        row.append(InlineKeyboardButton(text=key, callback_data=value))
        if len(row) == 2:
            keyboard.add(*row)
            row = []
    return keyboard

#–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ "–ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —Å–ø–æ—Å–æ–± –æ–±—â–µ–Ω–∏—è"
def prefered_way_to_communicate_menu():
    keyboard = InlineKeyboardMarkup()
    for key, value in prefered_way_to_communicate.items():
        keyboard.add(InlineKeyboardButton(text=key, callback_data=value))
    row = []
    for key, value in back_to_survey_buttons_dict.items():
        row.append(InlineKeyboardButton(text=key, callback_data=value))
        if len(row) == 2:
            keyboard.add(*row)
            row = []
    return keyboard

#–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å —Å–æ —à–∫–∞–ª–æ–π (1-10)
def out_of_ten_scale_menu():
    keyboard = InlineKeyboardMarkup(row_width=5)
    row = []
    for key, value in out_of_ten_scale.items():
        row.append(InlineKeyboardButton(text=key, callback_data=value))
        if len(row) == 5:
            keyboard.add(*row)
            row = []
    for key, value in back_to_survey_buttons_dict.items():
        row.append(InlineKeyboardButton(text=key, callback_data=value))
        if len(row) == 2:
            keyboard.add(*row)
            row = []
    return keyboard

#–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ –≥—Ä—É–ø–ø–µ
async def check_if_chat_member(message, user_id):
    try:
        info_chat_member = await bot.get_chat_member(chat_id, user_id)
        print(info_chat_member["status"])
        if info_chat_member["status"] != "left":
            print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Å—Ç–æ–∏—Ç –≤ –≥—Ä—É–ø–ø–µ.")
        else:
            await bot.send_message(message.from_user.id,
                                   text='–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –º–æ—é –≥—Ä—É–ø–ø—É, —Ç–∞–º –í—ã –Ω–∞–π–¥–µ—Ç–µ –º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ!\nhttps://t.me/+kx-uithPXXA3MWQy',
                                   reply_markup=main_menu(message))
            print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –≥—Ä—É–ø–ø–µ.")
    except:
        await bot.send_message(message.from_user.id, text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≥—Ä—É–ø–ø–µ.", reply_markup=main_menu(message))
        return


#–ø—É—Å—Ç–æ–µ inline-–º–µ–Ω—é
def empty_menu():
    keyboard = InlineKeyboardMarkup()
    return keyboard

#–∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥ –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –æ–ø—Ä–æ—Å –ø–æ–¥ –∫–∞–∂–¥—ã–º –æ—Ç–¥–µ–ª—å–Ω—ã–º –≤–æ–ø—Ä–æ—Å–æ–º
def back_to_survey_kb():
    keyboard = InlineKeyboardMarkup()
    back_to_survey_buttons_dict = {back_to_survey_text: 'back_to_survey',
                                   end_survey_text: 'finish_survey'}
    row = []
    for key, value in back_to_survey_buttons_dict.items():
        row.append(InlineKeyboardButton(text=key, callback_data=value))
        if len(row) == 2:
            keyboard.add(*row)
            row = []
    return keyboard

#–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –≤–Ω–∏–∑—É
def main_menu(message):
    keyboard = ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    keyboard.add(*main_menu_buttons)
    result = session.query(InformationAboutUsers).filter_by(id=message.from_user.id).first()
    if result.is_owner == 1:
        keyboard.add(*main_menu_buttons_for_owners)
    return keyboard


def method_menu():
    keyboard = InlineKeyboardMarkup()
    for key, value in methods_dict.items():
        keyboard.add(InlineKeyboardButton(text=key, callback_data=value))
    keyboard.add(InlineKeyboardButton(text=cancel, callback_data='cancel'))
    return keyboard

def topic_menu():
    keyboard = InlineKeyboardMarkup()
    for key, value in topics_dict.items():
        keyboard.add(InlineKeyboardButton(text=key, callback_data=value))
    keyboard.add(InlineKeyboardButton(text='üè≠ –î–ª—è –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏–π –∏ –∫–æ–º–ø–∞–Ω–∏–π', callback_data='for corps'))
    keyboard.add(InlineKeyboardButton(text=back, callback_data='back'))
    return keyboard

def topic_corps_menu():
    keyboard = InlineKeyboardMarkup()
    for key, value in topics_dict_for_corps.items():
        keyboard.add(InlineKeyboardButton(text=key, callback_data=value))
    keyboard.add(InlineKeyboardButton(text='üë®‚Äçü¶± –î–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ª—é–¥–µ–π', callback_data='for people'))
    keyboard.add(InlineKeyboardButton(text=back, callback_data='back'))
    return keyboard


def subtopic_menu(subtopics_dict):
    keyboard = InlineKeyboardMarkup()
    for key, value in subtopics_dict.items():
        if key in chosen_subtopics:
            text=f'‚úÖ {key}'
        else:
            text = f'‚ùå {key}'
        keyboard.add(InlineKeyboardButton(text=text, callback_data=value))
    keyboard.add(InlineKeyboardButton(text='–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É', callback_data='complete application'))
    keyboard.add(InlineKeyboardButton(text=back, callback_data='back'))
    return keyboard


# def contacts_menu():
#     keyboard = InlineKeyboardMarkup()
#     contacts_buttons_dict = {"–ö–æ–Ω—Ç–∞–∫—Ç 1":'contact_1',
#                              "–ö–æ–Ω—Ç–∞–∫—Ç 2":'contact_2',
#                              "–ö–æ–Ω—Ç–∞–∫—Ç 3":'contact_3'}
#     for key, value in contacts_buttons_dict.items():
#         keyboard.add(InlineKeyboardButton(text=key, callback_data=value))
#     return keyboard

#–Ω–∞–π—Ç–∏ –∫–ª—é—á —Å–ª–æ–≤–∞—Ä—è –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é
def find_key_by_value(dictionary, value):
    for key, val in dictionary.items():
        if val == value:
            return key
    return None

#—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
def update_data(dict, data, current_part_of_survey, question):
    global all_questions_WITH_ANSWERS_dict
    answer_user = find_key_by_value(dict, data)
    questions_part = f'questions_part_{current_part_of_survey}'
    key = find_key_by_value(all_questions_dict[questions_part], question)
    all_questions_WITH_ANSWERS_dict[key] = answer_user

#–æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –ø–æ–ª–Ω—É—é –∞–Ω–∫–µ—Ç—É
async def show_answered_full_survey(id):
    question_number_in_survey = 0
    survey_answers_list = '<b>–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞</b>\n'
    for key, value in all_questions_dict.items():
        for question, answer in value.items():
            question_number_in_survey  += 1
            survey_answers_list+= f'<b>{question_number_in_survey }.{question}</b>\n"{all_questions_dict[key][question]}"\n–í–∞—à –æ—Ç–≤–µ—Ç: <i>{all_questions_WITH_ANSWERS_dict[question]}</i>\n\n'
            if question_number_in_survey == 10:
                await bot.send_message(id, survey_answers_list, parse_mode='HTML')
                survey_answers_list = ''
    if survey_answers_list != '':
        await bot.send_message(id, survey_answers_list, parse_mode='HTML')

#–∏—Å–∫–∞—Ç—å –ø–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é
async def info_about_user_for_owner(message):
    result = session.query(InformationAboutUsers).filter_by(id=message.text).first()
    if result is not None:
        parameter_to_search = 'id'
    else:
        result = session.query(InformationAboutUsers).filter_by(username=message.text).first()
        if result is not None:
            parameter_to_search = 'username'
        else:
            result = session.query(UserAnswer).filter_by(answer=message.text).first()
            if result is not None:
                parameter_to_search = 'phone_number'
            else:
                return
    all_registered_users = ""
    if parameter_to_search == 'phone_number':
        result = session.query(InformationAboutUsers).filter_by(id=result.user_id).first()
    id_value = result.id
    username_value = result.username
    first_name_value = result.first_name
    last_name_value = result.last_name
    all_registered_users += f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {id_value}\n"
    if username_value is not None:
        all_registered_users += f"Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{username_value}\n"
    else:
        all_registered_users += f'Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n'

    all_registered_users += f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤ Telegram): {first_name_value}\n"

    if last_name_value is not None:
        all_registered_users += f'–§–∞–º–∏–ª–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤ Telegram): {last_name_value}\n\n'
    else:
        all_registered_users += f'–§–∞–º–∏–ª–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤ Telegram): –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n\n'

    if parameter_to_search == 'id':
        result = session.query(UserAnswer).filter_by(user_id=message.text).all()
    elif parameter_to_search == 'username':
        id = session.query(InformationAboutUsers).filter_by(username=message.text).first()
        result = session.query(UserAnswer).filter_by(user_id=id.id).all()
    elif parameter_to_search == 'phone_number':
        id = session.query(UserAnswer).filter_by(answer=message.text).first()
        result = session.query(UserAnswer).filter_by(user_id=id.user_id).all()
    all_registered_users += '–ê–Ω–∫–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:'
    for every in result:
        question = session.query(Question).filter_by(id=every.question_id).first()
        all_registered_users += (f"\n{every.question_id}. –í–æ–ø—Ä–æ—Å: {question.text}\n–û—Ç–≤–µ—Ç: {every.answer}")


    return all_registered_users
def save_data_to_db(id):
    user_id = session.query(InformationAboutUsers).filter_by(id=id).first()
    for question, answer_text in all_questions_WITH_ANSWERS_dict.items():
        question_id = session.query(Question).filter_by(text=all_questions_with_questions_text_dict[question]).first()
        answer = session.query(UserAnswer).filter_by(user_id=user_id.id, question_id=question_id.id).first()
        answer.answer = answer_text
    session.commit()
@dp.message_handler(commands=commands, state="*")
async def process_start_command(message: types.Message, ):
    await Form.waiting_for_button.set()
    # –í—Å—Ç–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∑–∞–ø–∏—Å—å —Å –ø–æ–ª–µ–º 'id'
    global user_id
    global all_questions_with_questions_text_dict
    global all_questions_WITH_ANSWERS_dict
    user_id = message.from_user.id
    data_from_message = ['id', 'username', 'first_name', 'last_name']
    values = [getattr(message.from_user, column) for column in data_from_message]
    existing_user = session.query(InformationAboutUsers).filter_by(id=values[0]).first()
    #–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
    if existing_user:
        existing_user.username = values[1]
        existing_user.first_name = values[2]
        existing_user.last_name = values[3]
        session.commit()
        #await bot.send_message(message.chat.id, text=f'–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å id={values[0]} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.')
    #–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ. –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
    else:
        user_info = InformationAboutUsers(id=values[0], username=values[1], first_name=values[2], last_name=values[3])
        session.add(user_info)
        session.commit()
        #await bot.send_message(message.chat.id, text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id={values[0]} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.')

    answers_are_exist = session.query(UserAnswer).filter_by(user_id=message.from_user.id).first()
    #–µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –æ—Ç–≤–µ—Ç –µ—Å—Ç—å –≤ –±–∞–∑–µ (–∞ –∑–Ω–∞—á–∏—Ç –µ—Å—Ç—å –∏ –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ)
    if answers_are_exist is not None:
        all_questions_WITH_ANSWERS_dict = {}
        all_questions_with_questions_text_dict = {}
        #–±–µ—Ä–µ–º –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∏–∑ –Ω–∏—Ö —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        for every_part in all_questions_dict:
            for question, text in all_questions_dict[every_part].items():
                question_id = session.query(Question).filter_by(text=text).first().id
                user_answer = session.query(UserAnswer).filter_by(user_id=message.from_user.id, question_id=question_id).first().answer
                all_questions_WITH_ANSWERS_dict[question] = user_answer
                all_questions_with_questions_text_dict[question] = text
        session.commit()
    #–µ—Å–ª–∏ –æ—Ç–≤–µ—Ç–æ–≤ –≤ –±–∞–∑–µ –Ω–µ—Ç –≤–æ–æ–±—â–µ –∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –±–æ—Ç—É
    else:
        all_questions_WITH_ANSWERS_dict = {}
        all_questions_with_questions_text_dict = {}
        #—Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å –∞–Ω–∫–µ—Ç—ã —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ –æ—Ç–≤–µ—Ç–∞–º–∏ "–±–µ–∑ –æ—Ç–≤–µ—Ç–∞" –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        for every_part in all_questions_dict:
            for question, text in all_questions_dict[every_part].items():
                question_id = session.query(Question).filter_by(text=text).first().id
                all_questions_WITH_ANSWERS_dict[question] = '–±–µ–∑ –æ—Ç–≤–µ—Ç–∞'
                all_questions_with_questions_text_dict[question] = text
                session.add(UserAnswer(user_id=values[0], question_id=question_id, answer='–±–µ–∑ –æ—Ç–≤–µ—Ç–∞'))
        session.commit()


    await message.reply("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø - —Ç–∞—Ä–æ-–±–æ—Ç, –∏ —Å –º–æ–µ–π –ø–æ–º–æ—â—å—é –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –∫ @Elenanadiva. "
                        "–ñ–µ–ª–∞–µ—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è?", reply_markup=greet_kb)

async def application(arg, state):
    if current_menu == 1:
        text = "–î–∞–≤–∞–π—Ç–µ —Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –í–∞—à—É –∑–∞—è–≤–∫—É –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é. –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—É—é –º–µ—Ç–æ–¥–∏–∫—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:"
        reply_markup = method_menu()
        current_state = Form.waiting_for_method
        await bot.edit_message_text(text, arg.from_user.id,
                                    arg.message.message_id, reply_markup=reply_markup)
        async with state.proxy() as data:
            data['text'] = text
            data['reply_markup'] = reply_markup
            data['state'] = current_state
        await current_state.set()
    elif current_menu == 2:
        topics_list = ''
        for index, every_topic in enumerate(topics_dict.keys()):
            topics_list += f'{index + 1}. {every_topic}.\n'
        method = find_key_by_value(methods_dict, arg.data)

        text = f'–í—ã–±—Ä–∞–Ω–Ω–∞—è –í–∞–º–∏ –º–µ—Ç–æ–¥–∏–∫–∞ - "{method}". –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –í–∞—Å —Ç–µ–º—É. –°–ø–∏—Å–æ–∫ —Ç–µ–º:\n{topics_list}'
        reply_markup = topic_menu()
        current_state = Form.waiting_for_topic
        await bot.edit_message_text(text, arg.from_user.id,
                                    arg.message.message_id, reply_markup=reply_markup)
        async with state.proxy() as data:
            data['method'] = method
            data['text'] = text
            data['reply_markup'] = reply_markup
            data['state'] = current_state
        await current_state.set()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"
@dp.message_handler(lambda message: message.text == main_menu_buttons[0], state=Form.waiting_for_button)
async def process_form_application(message: types.Message, state = FSMContext):
    global current_menu
    print(f'—Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é —Ä–∞–≤–Ω–æ {current_menu}')
    current_menu += 1
    print(f'—Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é —É–≤–µ–ª–∏—á–∏–ª–æ—Å—å –Ω–∞ 1 –∏ —Ç–µ–ø–µ—Ä—å —Ä–∞–≤–Ω–æ {current_menu}')
    text = "–î–∞–≤–∞–π—Ç–µ —Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –í–∞—à—É –∑–∞—è–≤–∫—É –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é. –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—É—é –º–µ—Ç–æ–¥–∏–∫—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:"
    reply_markup = method_menu()
    current_state = Form.waiting_for_method
    await message.answer(text, reply_markup=reply_markup)
    async with state.proxy() as data:
        data['text'] = text
        data['reply_markup'] = reply_markup
        data['state'] = current_state
    await current_state.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã"
@dp.message_handler(lambda message: message.text == main_menu_buttons[1], state=Form.waiting_for_button)
async def process_contacts_menu(message: types.Message):
    #await message.answer("–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:", reply_markup=contacts_menu())
    await bot.send_message(message.chat.id, '–ö–æ–Ω—Ç–∞–∫—Ç—ã, –ø–æ –∫–æ—Ç–æ—Ä—ã–º —Å–æ –º–Ω–æ–π –º–æ–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è.\n\n'
                                            '–ú–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º:\n\n@Elenanadiva\n\n'
                                            '–ú–æ—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞:\n\nhandozenkoelena82@gmail.com')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç—ã"
@dp.message_handler(lambda message: message.text == main_menu_buttons[2], state=Form.waiting_for_button)
async def show_survey_for_user(message: types.Message):
    await show_answered_full_survey(message.from_user.id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã"
@dp.message_handler(lambda message: message.text == main_menu_buttons[3], state= Form.waiting_for_button)
async def process_edit_survey(message: types.Message):
    await Form.waiting_for_question.set()
    await bot.send_message(message.from_user.id, f'{process_current_questions_part_status(current_part_of_survey)} {survey_is_in_progress_text}',
                           reply_markup=survey_part())

#–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤—ã–∑–æ–≤–∞ –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@dp.message_handler(lambda message: message.text == main_menu_buttons_for_owners[0] or
                                    message.text == main_menu_buttons_for_owners[1] or
                                    message.text == main_menu_buttons_for_owners[2], state=Form.waiting_for_button)
async def process_all_registered_users_button(message: types.Message):
    if message.text == main_menu_buttons_for_owners[0]:
        result = session.execute(select(InformationAboutUsers.id, InformationAboutUsers.username, InformationAboutUsers.first_name, InformationAboutUsers.last_name))
        all_registered_users = f"–í—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n"
        for index, row in enumerate(result):
            id_value = row[0]
            username_value = row[1]
            first_name_value = row[2]
            last_name_value = row[3]
            all_registered_users += f"{index + 1}. ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {id_value}\n"
            if username_value is not None:
                all_registered_users += f"Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{username_value}\n"
            else:
                all_registered_users += f'Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n'


            all_registered_users += f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤ Telegram): {first_name_value}\n"

            if last_name_value is not None:
                all_registered_users += f'–§–∞–º–∏–ª–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤ Telegram): {last_name_value}\n\n'
            else:
                all_registered_users += f'–§–∞–º–∏–ª–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤ Telegram): –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n\n'

            if (index + 1) % 50 == 0:
                await message.answer(text=all_registered_users, reply_markup=main_menu(message))
                all_registered_users = ''
            else:
                pass

        await message.answer(text=all_registered_users, reply_markup=main_menu(message))
    elif message.text == main_menu_buttons_for_owners[1]:
            await Form.waiting_for_insert.set()
            await message.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ id, username (–±–µ–∑ @) –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞–Ω–∫–µ—Ç—É –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã –∂–µ–ª–∞–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å:",
                reply_markup=main_menu(message))
    elif message.text == main_menu_buttons_for_owners[2]:
        await Form.waiting_for_insert_admin.set()
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ id –∏–ª–∏ username (–±–µ–∑ @) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –í—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∏–ª–∏ —Å–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–ø–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –¥–ª—è —ç—Ç–æ–≥–æ –µ–≥–æ –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö):",
                reply_markup=main_menu(message))


#–ø–æ–∏—Å–∫ –∞–Ω–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ id, username –∏–ª–∏ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
# @dp.message_handler(lambda message: message.text == main_menu_buttons_for_owners[1], state=Form.waiting_for_button)
# async def process_waiting_for_search_by(message: types.Message):
#     await Form.waiting_for_insert.set()
#     await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ id, username (–±–µ–∑ @) –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞–Ω–∫–µ—Ç—É –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã –∂–µ–ª–∞–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å:", reply_markup=main_menu(message))

#–æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ id, username –∏–ª–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
@dp.message_handler(state=Form.waiting_for_insert)
async def process_waiting_for_insert_to_search(message: types.Message):
    await message.answer(text=f'–í—ã –≤–≤–µ–ª–∏ "{message.text}". –û—Å—É—â–µ—Å—Ç–≤–ª—è—é –ø–æ–∏—Å–∫...', reply_markup=main_menu(message))
    await try_to_search_user_by(message)

@dp.message_handler(state=Form.waiting_for_insert_admin)
async def process_waiting_for_insert_to_search(message: types.Message):
    if message.text == message.from_user.id:
        await message.answer(text=f'üö´ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å —Å–µ–±—è.', reply_markup=main_menu(message))
        return

    await message.answer(text=f'–í—ã –≤–≤–µ–ª–∏ "{message.text}". –û—Å—É—â–µ—Å—Ç–≤–ª—è—é –ø–æ–∏—Å–∫...', reply_markup=main_menu(message))
    await try_to_make_user_admin(message)

async def try_to_make_user_admin(message):
    result = session.query(InformationAboutUsers).filter_by(id=message.text).first()
    if result:
        if result.is_owner == 0:
            result.is_owner = 1
            session.commit()
            await bot.send_message(message.from_user.id, f'‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º id –Ω–∞–π–¥–µ–Ω –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.',
                                   reply_markup=main_menu(message))
        else:
            result.is_owner = 0
            session.commit()
            await bot.send_message(message.from_user.id,
                                   f'‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º id –Ω–∞–π–¥–µ–Ω –∏ –ª–∏—à–µ–Ω —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.',
                                   reply_markup=main_menu(message))


    else:
        print('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º id –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ. –û—Å—É—â–µ—Å—Ç–≤–ª—è—é –ø–æ–∏—Å–∫ –ø–æ username.')
        result = session.query(InformationAboutUsers).filter_by(username=message.text).first()
        if result:
            if result.is_owner == 0:
                result.is_owner = 1
                session.commit()
                await bot.send_message(message.from_user.id,
                                       f'‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º username –Ω–∞–π–¥–µ–Ω –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.',
                                       reply_markup=main_menu(message))
            else:
                result.is_owner = 0
                session.commit()
                await bot.send_message(message.from_user.id,
                                       f'‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º username –Ω–∞–π–¥–µ–Ω –∏ –ª–∏—à–µ–Ω —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.',
                                       reply_markup=main_menu(message))
        else:
            await bot.send_message(message.from_user.id, 'üö´ –¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ. '
                                                             '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.',
                                       reply_markup=main_menu(message))

    await Form.waiting_for_button.set()

#–ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –≤–≤–µ–¥—ë–Ω–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é
async def try_to_search_user_by(message):
    result = session.query(InformationAboutUsers).filter_by(id=message.text).first()
    if result:
        info = await info_about_user_for_owner(message)
        await bot.send_message(message.from_user.id, f'‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º id –Ω–∞–π–¥–µ–Ω.\n{info}', reply_markup=main_menu(message))
    else:
        print('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º id –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ. –û—Å—É—â–µ—Å—Ç–≤–ª—è—é –ø–æ–∏—Å–∫ –ø–æ username.')
        result = session.query(InformationAboutUsers).filter_by(username=message.text).first()
        if result:
            print(result.username)
            info = await info_about_user_for_owner(message)
            await bot.send_message(message.from_user.id, f'‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º username –Ω–∞–π–¥–µ–Ω.\n{info}',
                                   reply_markup=main_menu(message))
        else:
            print('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º username –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ. –û—Å—É—â–µ—Å—Ç–≤–ª—è—é –ø–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞.')
            result = session.query(UserAnswer).filter_by(answer=message.text).first()
            if result:
                info = await info_about_user_for_owner(message)
                await bot.send_message(message.from_user.id,
                                       f'‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞–π–¥–µ–Ω.\n{info}',
                                       reply_markup=main_menu(message))
            else:
                await bot.send_message(message.from_user.id, 'üö´ –¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ. '
                                                             '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.',
                                       reply_markup=main_menu(message))

    await Form.waiting_for_button.set()

#–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –≤—ã–±–æ—Ä–∞ (–ø—Ä–æ—Ö–æ–¥–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∏–ª–∏ –Ω–µ—Ç)
@dp.message_handler(state=Form.waiting_for_button)
async def process_start_command(message: types.Message):
    global current_part_of_survey
    current_part_of_survey = 0
    current_part_of_survey += 1
    if message.text == button_main_agree_text:
        await Form.waiting_for_question.set()
        await bot.send_message(message.from_user.id, f'{process_current_questions_part_status(current_part_of_survey)} {survey_is_in_progress_text}',
                               reply_markup=survey_part())

    elif message.text == button_main_disagree_text:
        await check_if_chat_member(message, message.from_user.id)
        await bot.send_message(message.from_user.id, main_menu_text, reply_markup=main_menu(message))







#–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ inline-–º–µ–Ω—é –∞–Ω–∫–µ—Ç—ã
@dp.callback_query_handler(lambda c: c.data.startswith('question_'), state=Form.waiting_for_question)
async def process_question(callback_query: types.CallbackQuery, state: FSMContext):
    question_number = int(callback_query.data.split('_')[1])
    global question
    question = find_key_by_value(inline_button_questions_and_callbacks_dict, callback_query.data)
    await Form.waiting_for_answer.set()
    await state.update_data(question=question, question_number=question_number)
    if  '–í–∞—à –≤–æ–ø—Ä–æ—Å –∫–∞—Å–∞–µ—Ç—Å—è' in question:
        await callback_query.message.edit_text(
            question,
            reply_markup=yes_no_partially_menu())
    elif '–±—ã—Å—Ç—Ä–µ–µ –≤—Å–µ–≥–æ' in question:
        await callback_query.message.edit_text(
            question,
            reply_markup=fastest_way_to_answer_menu())
    elif '–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏' in question:
        await callback_query.message.edit_text(
            question,
            reply_markup=consultations_types_menu())
    elif '–≤–∏–¥ –æ–±—â–µ–Ω–∏—è' in question:
        await callback_query.message.edit_text(
            question,
            reply_markup=prefered_way_to_communicate_menu())
    elif '—ç–Ω–µ—Ä–≥–æ—Ü–µ–Ω–Ω–æ—Å—Ç—å' in question:
        await callback_query.message.edit_text(
            question,
            reply_markup=yes_no_partially_menu())
    elif '–ø–æ 10-–±–∞–ª–ª—å–Ω–æ–π —à–∫–∞–ª–µ' in question:
        await callback_query.message.edit_text(
            question,
            reply_markup=out_of_ten_scale_menu())
    else:
        await callback_query.message.edit_text(
            question,
            reply_markup=back_to_survey_kb())
    async with state.proxy() as data:
        data['question_message_id'] = callback_query.message.message_id


#–æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—é—â–∏–µ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
@dp.message_handler(state=Form.waiting_for_answer)
async def process_answer(message: types.Message, state: FSMContext):
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    answer = message.text
    async with state.proxy() as data:
        question = data['question']
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    if message.text in main_menu_buttons or message.text[1:] in commands:
        return
    if question:
        if question not in random_answer_expected_questions:
            return
        if 'question_message_id' in data:
            await bot.edit_message_text(text="–û—Ç–∫—Ä—ã—Ç–æ –±–æ–ª–µ–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
                                        chat_id=message.chat.id,
                                        message_id=data['question_message_id'],
                                        reply_markup=empty_menu())
        await message.answer(f'–í–∞—à –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å "{find_key_by_value(questions_part, question)}": "{answer}". '
                             f'{survey_is_in_progress_text}',
                         reply_markup=survey_part())
        global all_questions_WITH_ANSWERS_dict
        #—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ —Å–ª–æ–≤–∞—Ä—å
        answers_questions_part = f'questions_part_{current_part_of_survey}'
        key = find_key_by_value(all_questions_dict[answers_questions_part], question)
        all_questions_WITH_ANSWERS_dict[key] = answer
        await Form.waiting_for_question.set()
        async with state.proxy() as data:
            data['question'] = None
        return



#–æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å "–ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥ –æ–±—â–µ–Ω–∏—è"
@dp.callback_query_handler(lambda c: find_key_by_value(prefered_way_to_communicate, c.data), state=Form.waiting_for_answer)
async def process_preffered_way_to_talk(callback_query: types.CallbackQuery):
    update_data(prefered_way_to_communicate, callback_query.data, current_part_of_survey, question)
    await Form.waiting_for_question.set()
    await callback_query.answer()
    await bot.edit_message_text(
        f'{process_current_questions_part_status(current_part_of_survey)} –í–∞—à –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å "{question}":'
        f' "{find_key_by_value(prefered_way_to_communicate, callback_query.data)}". '
        f'{survey_is_in_progress_text}',
        callback_query.from_user.id,
        callback_query.message.message_id,
        reply_markup=survey_part())


#–æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å "–∫–∞–∫–æ–π —Ç–∏–ø –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç"
@dp.callback_query_handler(lambda c: find_key_by_value(consultations_types, c.data), state=Form.waiting_for_answer)
async def process_interested_type_of_consultation(callback_query: types.CallbackQuery):
    update_data(consultations_types, callback_query.data, current_part_of_survey, question)
    await Form.waiting_for_question.set()
    await callback_query.answer()
    await bot.edit_message_text(
        f'{process_current_questions_part_status(current_part_of_survey)} –í–∞—à –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å "{question}":'
        f' "{find_key_by_value(consultations_types, callback_query.data)}". '
        f'{survey_is_in_progress_text}',
        callback_query.from_user.id,
        callback_query.message.message_id,
        reply_markup=survey_part())


#–æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å "–Ω–∞–∏–±–æ–ª–µ–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏"
@dp.callback_query_handler(lambda c: find_key_by_value(fastest_way_to_answer, c.data), state=Form.waiting_for_answer)
async def process_way_to_connect(callback_query: types.CallbackQuery):
    update_data(fastest_way_to_answer, callback_query.data, current_part_of_survey, question)
    await Form.waiting_for_question.set()
    await callback_query.answer()
    await bot.edit_message_text(
        f'{process_current_questions_part_status(current_part_of_survey)} –í–∞—à –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å "{question}":'
        f' "{find_key_by_value(fastest_way_to_answer, callback_query.data)}". '
        f'{survey_is_in_progress_text}',
        callback_query.from_user.id,
        callback_query.message.message_id,
        reply_markup=survey_part())

#–æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å —Å–æ —à–∫–∞–ª–æ–π
@dp.callback_query_handler(lambda c: find_key_by_value(out_of_ten_scale, c.data), state=Form.waiting_for_answer)
async def process_answer_with_scale(callback_query: types.CallbackQuery):
    update_data(out_of_ten_scale, callback_query.data, current_part_of_survey, question)
    await Form.waiting_for_question.set()
    await callback_query.answer()
    await bot.edit_message_text(
        f'{process_current_questions_part_status(current_part_of_survey)} –í–∞—à –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å "{question}":'
        f' "{find_key_by_value(out_of_ten_scale, callback_query.data)}". '
        f'{survey_is_in_progress_text}',
        callback_query.from_user.id,
        callback_query.message.message_id,
        reply_markup=survey_part())

#–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ "–¥–∞/–Ω–µ—Ç/—á–∞—Å—Ç–∏—á–Ω–æ"
@dp.callback_query_handler(lambda c: c.data == 'answer_yes_button'
                                     or c.data == 'answer_no_button'
                                     or c.data == 'answer_partially_button'
                                     or c.data in consultations_types, state=Form.waiting_for_answer)
async def process_yes_no_partially_buttons(callback_query: types.CallbackQuery):
    update_data(yes_no_partially_buttons_dict, callback_query.data, current_part_of_survey, question)
    await Form.waiting_for_question.set()
    await callback_query.answer()
    await bot.edit_message_text(
        f'{process_current_questions_part_status(current_part_of_survey)} –í–∞—à –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å "{question}":'
        f' "{find_key_by_value(yes_no_partially_buttons_dict, callback_query.data)}". '
        f'{survey_is_in_progress_text}',
        callback_query.from_user.id,
        callback_query.message.message_id,
        reply_markup=survey_part())


#–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥" –∏–∑ –≤–æ–ø—Ä–æ—Å–∞
@dp.callback_query_handler(lambda c: c.data == 'back_to_survey', state=Form.waiting_for_answer)
async def process_back_to_survey(callback_query: types.CallbackQuery):
    await Form.waiting_for_question.set()
    await callback_query.answer()
    await bot.edit_message_text(f'{process_current_questions_part_status(current_part_of_survey)} {survey_is_in_progress_text}',
                                callback_query.from_user.id,
                                callback_query.message.message_id,
                                reply_markup=survey_part())

#—Å—Ç—Ä–µ–ª–∫–∞ –≤ –ø—Ä–µ–¥—ã–¥—É—â—É—é —á–∞—Å—Ç—å –∞–Ω–∫–µ—Ç—ã
@dp.callback_query_handler(lambda c: c.data == 'prev_part_of_survey', state=Form.waiting_for_question)
async def process_prev_part_of_survey(callback_query: types.CallbackQuery):
    await Form.waiting_for_question.set()
    global current_part_of_survey
    current_part_of_survey -= 1
    await callback_query.answer()
    await bot.edit_message_text(f"{process_current_questions_part_status(current_part_of_survey)} {survey_is_in_progress_text}",
                                callback_query.from_user.id,
                                callback_query.message.message_id,
                                reply_markup=survey_part())

#—Å—Ç—Ä–µ–ª–∫–∞ –≤ —Å–ª–µ–¥—É—é—â—É—é —á–∞—Å—Ç—å –∞–Ω–∫–µ—Ç—ã
@dp.callback_query_handler(lambda c: c.data == 'next_part_of_survey', state=Form.waiting_for_question)
async def process_next_part_of_survey(callback_query: types.CallbackQuery):
    await Form.waiting_for_question.set()
    global current_part_of_survey
    current_part_of_survey += 1
    await callback_query.answer()
    await bot.edit_message_text(f"{process_current_questions_part_status(current_part_of_survey)} {survey_is_in_progress_text}",
                                callback_query.from_user.id,
                                callback_query.message.message_id,
                                reply_markup=survey_part())


#–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
@dp.callback_query_handler(lambda c: c.data == 'finish_survey', state="*")
async def process_finish_survey(callback_query: types.CallbackQuery):
    await Form.waiting_for_button.set()
    save_data_to_db(callback_query.from_user.id)
    await check_if_chat_member(callback_query, callback_query.from_user.id)
    await bot.edit_message_text(survey_is_finished_text,
                            callback_query.from_user.id,
                            callback_query.message.message_id)
    await bot.send_message(callback_query.from_user.id, main_menu_text, reply_markup=main_menu(callback_query))


#–≤—ã–±–æ—Ä –º–µ—Ç–æ–¥–∏–∫–∏
@dp.callback_query_handler(lambda c: c.data in methods_dict.values() or c.data == 'cancel', state=Form.waiting_for_method)
async def process_chosen_method_button(callback_query: types.CallbackQuery, state = FSMContext):
    global current_menu
    if callback_query.data == 'cancel':
        current_menu = 0
        print(f'—Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é –æ–±–Ω—É–ª–∏–ª–æ—Å—å –∏ —Å—Ç–∞–ª–æ {current_menu}')
        await bot.edit_message_text('–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –æ—Ç–º–µ–Ω–µ–Ω–æ.',
                                    callback_query.from_user.id,
                                    callback_query.message.message_id, reply_markup=empty_menu())
        await Form.waiting_for_button.set()
    else:

        current_menu += 1
        print(f'—Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é —É–≤–µ–ª–∏—á–∏–ª–æ—Å—å –Ω–∞ 1 –∏ —Ç–µ–ø–µ—Ä—å —Ä–∞–≤–Ω–æ {current_menu}')
        await application(callback_query, state)


@dp.callback_query_handler(lambda c: c.data == 'for corps' or c.data == 'for people', state=Form.waiting_for_topic)
async def process_for_corporations_button(callback_query: types.CallbackQuery, state = FSMContext):
    async with state.proxy() as data:
        method = data['method']
    topics_list = ''
    if callback_query.data == 'for corps':
        for index, every_topic in enumerate(topics_dict_for_corps.keys()):
            topics_list += f'{index + 1}. {every_topic}.\n'
        reply_markup = topic_corps_menu()
    else:
        for index, every_topic in enumerate(topics_dict.keys()):
            topics_list += f'{index + 1}. {every_topic}.\n'
        reply_markup = topic_menu()

    await bot.edit_message_text(f'–í—ã–±—Ä–∞–Ω–Ω–∞—è –í–∞–º–∏ –º–µ—Ç–æ–¥–∏–∫–∞ - "{method}".'
                                f' –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –í–∞—Å —Ç–µ–º—É. –°–ø–∏—Å–æ–∫ —Ç–µ–º:\n{topics_list}',
                                callback_query.from_user.id,
                                callback_query.message.message_id,
                                reply_markup=reply_markup)



#–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã
@dp.callback_query_handler(lambda c: c.data in topics_dict.values() or c.data in topics_dict_for_corps.values(), state=Form.waiting_for_topic)
async def process_chosen_topic(callback_query: types.CallbackQuery, state=FSMContext):
    global current_menu
    current_menu += 1
    print(f'—Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é —É–≤–µ–ª–∏—á–∏–ª–æ—Å—å –Ω–∞ 1 –∏ —Ç–µ–ø–µ—Ä—å —Ä–∞–≤–Ω–æ {current_menu}')
    if callback_query.data in topics_dict.values():
        topic = find_key_by_value(topics_dict, callback_query.data)
    else:
        topic = find_key_by_value(topics_dict_for_corps, callback_query.data)



    async with state.proxy() as data:
        data['topic'] = topic



    if topic in subtopics_dict_1.keys():
        subtopic_dict = subtopics_dict_1[topic]
    elif topic in subtopics_dict_2.keys():
        subtopic_dict = subtopics_dict_2[topic]
    elif topic in subtopics_dict_3.keys():
        subtopic_dict = subtopics_dict_3[topic]
    elif topic in subtopics_dict_4.keys():
        subtopic_dict = subtopics_dict_4[topic]
    else:
        username_and_id = await just_info(callback_query.from_user.id)
        await bot.edit_message_text(f"{username_and_id}\n<b>–ú–æ—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é</b>:\n <b>–ú–µ—Ç–æ–¥–∏–∫–∞</b> - <i>{data['method']}</i>\n <b>–¢–µ–º–∞</b> - <i>{data['topic']}</i>", callback_query.from_user.id, callback_query.message.message_id, reply_markup=empty_menu(), parse_mode='HTML')

        await bot.send_message(callback_query.from_user.id,
                               "–ü–µ—Ä–µ—à–ª–∏—Ç–µ –∑–∞—è–≤–∫—É [–º–Ω–µ](https://t.me/Elenanadiva) –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –í–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º–æ–π\!",
                               parse_mode='markdownV2')

        await Form.waiting_for_button.set()
        current_menu = 0
        print(f'—Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é –æ–±–Ω—É–ª–∏–ª–æ—Å—å –∏ —Å—Ç–∞–ª–æ {current_menu}')
        return

    async with state.proxy() as data:
        data['subtopic_dict'] = subtopic_dict
    subtopics = ''

    for index, every_subtopic in enumerate(subtopic_dict.keys()):
        subtopics += f'{index + 1}. {every_subtopic}\n'

    await bot.edit_message_text(f'–í—ã–±—Ä–∞–Ω–Ω–∞—è –í–∞–º–∏ —Ç–µ–º–∞ - "{topic}". '
                                f'–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏—Ö –≤–∞—Å –ø–æ–¥—Ç–µ–º, –∏–ª–∏ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É". –°–ø–∏—Å–æ–∫ –ø–æ–¥—Ç–µ–º:\n\n{subtopics}', callback_query.from_user.id,
                                callback_query.message.message_id, reply_markup=subtopic_menu(subtopic_dict))
    await Form.waiting_for_subtopic.set()

#–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–¥—Ç–µ–º—ã
@dp.callback_query_handler(lambda c: c.data != 'back', state=Form.waiting_for_subtopic)
async def process_chosen_subtopic(callback_query: types.CallbackQuery, state = FSMContext):
    global list_of_choices
    global chosen_subtopics
    global current_menu

    async with state.proxy() as data:
        subtopic_dict = data['subtopic_dict']

    if callback_query.data == 'complete application':
        if chosen_subtopics == []:
            list_of_choices = '–Ω–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –ø–æ–¥—Ç–µ–º—ã.'
        else:
            element_to_remove = '"'
            list_of_choices = list_of_choices.replace(element_to_remove, "")
            pass
        subtopic_amount = '–ü–æ–¥—Ç–µ–º–∞'
        username_and_id = await just_info(callback_query.from_user.id)
        if len(chosen_subtopics) > 1:
            subtopic_amount = '–ü–æ–¥—Ç–µ–º—ã'
        await bot.edit_message_text(f"{username_and_id}\n <b>–ú–æ—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é</b>:\n <b>–ú–µ—Ç–æ–¥–∏–∫–∞</b> - <i>{data['method']}</i>.\n <b>–¢–µ–º–∞</b> - <i>{data['topic']}</i>.\n <b>{subtopic_amount}</b> - <i>{list_of_choices}</i>",
                                    callback_query.from_user.id,
                                    callback_query.message.message_id,
                                    reply_markup=empty_menu(), parse_mode='HTML')
        await bot.send_message( callback_query.from_user.id, "–ü–µ—Ä–µ—à–ª–∏—Ç–µ –∑–∞—è–≤–∫—É [–º–Ω–µ](https://t.me/Elenanadiva) –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –í–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º–æ–π\!", parse_mode='markdownV2')
        chosen_subtopics = []
        await Form.waiting_for_button.set()
        current_menu = 0
        print(f'—Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é –æ–±–Ω—É–ª–∏–ª–æ—Å—å –∏ —Å—Ç–∞–ª–æ {current_menu}')
        return
    else:
        pass

    if callback_query.data in subtopic_dict.values():
        if find_key_by_value(subtopic_dict, callback_query.data) in chosen_subtopics:
            chosen_subtopics.remove(find_key_by_value(subtopic_dict, callback_query.data))
        else:
            chosen_subtopics.append(find_key_by_value(subtopic_dict, callback_query.data))

    list_of_choices = ''
    for index, subtopic in enumerate(chosen_subtopics):
        if index + 1 < len(chosen_subtopics):
            list_of_choices += f'"{subtopic}", '
        else:
            list_of_choices += f'"{subtopic}".'


    if len(chosen_subtopics) == 0:
        text = f'–í—ã –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –ø–æ–¥—Ç–µ–º—ã. –°–¥–µ–ª–∞–π—Ç–µ –≤—ã–±–æ—Ä –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É".'
    elif len(chosen_subtopics) == 1:
        text = f'–í—ã–±—Ä–∞–Ω–Ω–∞—è –í–∞–º–∏ –ø–æ–¥—Ç–µ–º–∞ - {list_of_choices} –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –≤—ã–±–æ—Ä –ø–æ–¥—Ç–µ–º –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É".'
    else:
        text = f'–í—ã–±—Ä–∞–Ω–Ω—ã–µ –í–∞–º–∏ –ø–æ–¥—Ç–µ–º—ã - {list_of_choices} –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –≤—ã–±–æ—Ä –ø–æ–¥—Ç–µ–º –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É".'

    await bot.edit_message_text(text,
                                callback_query.from_user.id,
                                callback_query.message.message_id, reply_markup=subtopic_menu(subtopic_dict))

#–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥" –≤ –∑–∞—è–≤–∫–µ
@dp.callback_query_handler(lambda c: c.data == 'back', state="*")
async def back_from_application_button(callback_query: types.CallbackQuery, state = FSMContext):
    global current_menu
    current_menu -= 1
    print(f'—Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é —É–º–µ–Ω—å—à–∏–ª–æ—Å—å –Ω–∞ 1 –∏ —Ç–µ–ø–µ—Ä—å —Ä–∞–≤–Ω–æ {current_menu}')
    await application(callback_query, state)


async def just_info(arg):
    user_info = ''
    result = session.query(InformationAboutUsers).filter_by(id=arg).first()
    id_value = result.id
    username_value = result.username
    user_info += f"–ú–æ–π ID: {id_value}\n"
    if username_value is not None:
        user_info += f"–ú–æ–π Username: @{username_value}\n"
    else:
        pass
    return(user_info)



if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)