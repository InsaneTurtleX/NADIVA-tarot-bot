# -*- coding: utf-8 -*-
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, ChatMemberStatus
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from sqlalchemy import create_engine, Column, Integer, String, Boolean, select
from sqlalchemy.orm import sessionmaker
from sqlalchemy.ext.declarative import declarative_base
import copy
from pprint import pprint

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–æ–º–æ—â–∏ ORM
engine = create_engine('mysql://user1:1234@localhost/taro-bot')

#–±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –º–æ–¥–µ–ª–∏
Base = declarative_base()

#—Å–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Ç–∞–±–ª–∏—Ü—ã
class InformationAboutUsers(Base):
    __tablename__ = 'information_about_users'
    id = Column(Integer, primary_key=True)
    is_owner = Column(Boolean, default=False)
    username = Column(String(255))
    first_name = Column(String(255))
    last_name = Column(String(255))

#—Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
Session = sessionmaker(bind=engine)
session = Session()

#—Ç–æ–∫–µ–Ω –∏ –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞, –æ–±—ä–µ–∫—Ç —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –ø–∞–º—è—Ç–∏, –¥–∏—Å–ø–µ—Ç—á–µ—Ä (–∫–æ–ª–±—ç–∫–æ–≤, —Å–æ–æ–±—â–µ–Ω–∏–π, —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏ —Ç–¥)
token = '7067592422:AAF-ch8SK5asSyxYmY-hEz6TcQ8vz6aJRZU'
bot = Bot(token=token)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

#—Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã
button_agree_text = '–î–∞'
button_disagree_text = '–ù–µ—Ç'
end_survey_text = 'üö´ –ó–∞–∫–æ–Ω—á–∏—Ç—å –æ–ø—Ä–æ—Å'
back_to_survey_text = '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–Ω–∫–µ—Ç–µ'
survey_is_finished_text = '–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ–µ –ø–æ–∑–¥–Ω–µ–µ, –µ—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ.'
survey_is_in_progress_text = f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –í—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –¥–∞—Ç—å –æ—Ç–≤–µ—Ç –∏–ª–∏ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:'
main_menu_text = '–ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—Å–ª—É–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º, –∫–æ–Ω—Ç–∞–∫—Ç—ã, –ø–æ –∫–æ—Ç–æ—Ä—ã–º —Å –Ω–∞–º–∏ –º–æ–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è –∏–ª–∏ –∂–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É.'
arrow_up_text = "‚¨ÜÔ∏è"
arrow_down_text = "‚¨áÔ∏è"


#–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
chat_id = -4139713338
current_part_of_survey = 0
commands = ['start', 'open', 'go']

main_menu_buttons = ["–°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥","–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã","–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç—ã","–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã"]
main_menu_buttons_for_owners = ["–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π","–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"]
back_to_survey_buttons_dict = {back_to_survey_text: 'back_to_survey',
                                   end_survey_text: 'finish_survey'}

fastest_way_to_answer = {'WhatsApp':'whatsapp',
                         'Telegram':'telegram',
                         'Mail':'mail'}

yes_no_partially_buttons_dict = {button_agree_text: 'answer_yes_button',
                             button_disagree_text: 'answer_no_button',
                             "–ß–∞—Å—Ç–∏—á–Ω–æ": 'answer_partially_button',}

consultations_types = {'–¢–∞—Ä–æ':'service_1',
                       '–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è':'service_2',
                       '–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ —á–∏—Å—Ç–∫–∏':'service_3',
                       '–ú–µ–¥–∏—Ç–∞—Ü–∏–∏':'service_4',
                        '–ê–∫—Ç–∏–≤–∞—Ü–∏–∏':'service_5',
                       '–ù–∞—Å—Ç—Ä–æ–π–∫–∏':'service_6',
                       '–†–∞–±–æ—Ç–∞ —Å –†–æ–¥–æ–º':'service_7',
                       '–ê–Ω–≥–µ–ª—å—Å–∫–∞—è —Ç–µ—Ä–∞–ø–∏—è':'service_8'}

prefered_way_to_communicate = {'–û–Ω–ª–∞–π–Ω':'online',
                               '–û—Ñ–ª–∞–π–Ω':'offline',
                               '–í–∏–¥–µ–æ—Å–≤—è–∑—å':'video',
                               '–ê—É–¥–∏–æ':'audio',
                               '–ü–∏—Å—å–º–µ–Ω–Ω–æ':'text'}

out_of_ten_scale = {'1':'1',
                    '2':'2',
                    '3':'3',
                    '4':'4',
                    '5':'5',
                    '6':'6',
                    '7':'7',
                    '8':'8',
                    '9':'9',
                    '10':'10'}

#—Å–æ—Å—Ç–æ—è–Ω–∏—è
class Form(StatesGroup):
    waiting_for_question = State()
    waiting_for_answer = State()



#—Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—é—â–∏—Ö –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
random_answer_expected_questions = ['–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –í–∞—à–µ –∏–º—è:',
                                    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –í–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è:',
                                    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –≥–æ—Ä–æ–¥ –∏ —Å—Ç—Ä–∞–Ω—É –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è:',
                                    '–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –í–∞—à —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –ø–æ—á—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å:',
                                    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Å –í–∞–º–∏ –º–æ–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è –≤ WhatsApp:',
                                    '–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á–µ–º –í—ã –∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å?',
                                    '–ö–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –í—ã –æ–∂–∏–¥–∞–µ—Ç–µ –æ—Ç –Ω–∞—à–µ–π —Å –≤–∞–º–∏ —Ä–∞–±–æ—Ç—ã?',
                                    '–ü–æ—á–µ–º—É –í—ã —Ä–µ—à–∏–ª–∏ –ø–æ–π—Ç–∏ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é/–Ω–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ –∏–º–µ–Ω–Ω–æ –∫–æ –º–Ω–µ?',
                                    '–ü–æ—á–µ–º—É –º–Ω–µ —Å—Ç–æ–∏—Ç –≤–∑—è—Ç—å –∏–º–µ–Ω–Ω–æ –í–∞—Å?']
#—Å–ø–∏—Å–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
questions_part_1 = {'–í–∞—à–µ –∏–º—è':'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –í–∞—à–µ –∏–º—è:', '–í–∞—à–∞ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è':'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –í–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è:',
                    '–ì–æ—Ä–æ–¥, —Å—Ç—Ä–∞–Ω–∞':'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –≥–æ—Ä–æ–¥ –∏ —Å—Ç—Ä–∞–Ω—É –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è:',
                    '–í–∞—à —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –ø–æ—á—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å':'–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –í–∞—à —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –ø–æ—á—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å:',
                    '–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ WhatsApp':'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Å –í–∞–º–∏ –º–æ–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è –≤ WhatsApp:',
                    '–ù–∞–∏–±–æ–ª–µ–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏':'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –Ω–∞–∏–±–æ–ª–µ–µ —É–¥–æ–±–Ω—ã–π –¥–ª—è –≤–∞—Å —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏, –≥–¥–µ –≤—ã –±—ã—Å—Ç—Ä–µ–µ –≤—Å–µ–≥–æ —É–≤–∏–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ):'}

questions_part_2 = {'–í–∞—à –≤–æ–ø—Ä–æ—Å –∫–∞—Å–∞–µ—Ç—Å—è –ª–∏—á–Ω–æ–π –∂–∏–∑–Ω–∏?':'–í–∞—à –≤–æ–ø—Ä–æ—Å –∫–∞—Å–∞–µ—Ç—Å—è –ª–∏—á–Ω–æ–π –∂–∏–∑–Ω–∏?',
                    '–í–∞—à –≤–æ–ø—Ä–æ—Å –∫–∞—Å–∞–µ—Ç—Å—è –±–∏–∑–Ω–µ—Å–∞, —Ä–∞–±–æ—Ç—ã, —Ñ–∏–Ω–∞–Ω—Å–æ–≤?':'–í–∞—à –≤–æ–ø—Ä–æ—Å –∫–∞—Å–∞–µ—Ç—Å—è –±–∏–∑–Ω–µ—Å–∞, —Ä–∞–±–æ—Ç—ã, —Ñ–∏–Ω–∞–Ω—Å–æ–≤?',
                    '–í–∞—à –≤–æ–ø—Ä–æ—Å –∫–∞—Å–∞–µ—Ç—Å—è –∑–¥–æ—Ä–æ–≤—å—è?':'–í–∞—à –≤–æ–ø—Ä–æ—Å –∫–∞—Å–∞–µ—Ç—Å—è –∑–¥–æ—Ä–æ–≤—å—è?',
                    '–í–∞—à –≤–æ–ø—Ä–æ—Å –∫–∞—Å–∞–µ—Ç—Å—è –¥—É—Ö–æ–≤–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞ –∏ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è?':'–í–∞—à –≤–æ–ø—Ä–æ—Å –∫–∞—Å–∞–µ—Ç—Å—è –¥—É—Ö–æ–≤–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞ –∏ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è?',
                    '–í–∞—à –≤–æ–ø—Ä–æ—Å –∫–∞—Å–∞–µ—Ç—Å—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏?':'–í–∞—à –≤–æ–ø—Ä–æ—Å –∫–∞—Å–∞–µ—Ç—Å—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏?'}

questions_part_3 = {'–ö–∞–∫–æ–π –≤–∏–¥ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å?':'–ö–∞–∫–æ–π –≤–∏–¥ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å? (–≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ)',
                    '–ö–∞–∫–æ–π –≤–∏–¥ –æ–±—â–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?':'–ö–∞–∫–æ–π –≤–∏–¥ –æ–±—â–µ–Ω–∏—è –í—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ? (–≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ):'}

questions_part_4 = {'–í–∞—à —Ä–æ–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏':'–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á–µ–º –í—ã –∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å?',
                    '–í–∞—à–∏ –æ–∂–∏–¥–∞–Ω–∏—è':'–ö–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –í—ã –æ–∂–∏–¥–∞–µ—Ç–µ –æ—Ç –Ω–∞—à–µ–π —Å –≤–∞–º–∏ —Ä–∞–±–æ—Ç—ã?',
                    '–ü–æ—á–µ–º—É —Ä–µ—à–∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫–æ –º–Ω–µ':'–ü–æ—á–µ–º—É –í—ã —Ä–µ—à–∏–ª–∏ –ø–æ–π—Ç–∏ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é/–Ω–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ –∏–º–µ–Ω–Ω–æ –∫–æ –º–Ω–µ?',
                    '–ü–æ—á–µ–º—É –º–Ω–µ —Å—Ç–æ–∏—Ç –≤–∑—è—Ç—å –∏–º–µ–Ω–Ω–æ –í–∞—Å':'–ü–æ—á–µ–º—É –º–Ω–µ —Å—Ç–æ–∏—Ç –≤–∑—è—Ç—å –∏–º–µ–Ω–Ω–æ –í–∞—Å?'}

questions_part_5 = {'–ü–æ–Ω—è—Ç–∏–µ —ç–Ω–µ—Ä–≥–æ—Ü–µ–Ω–Ω–æ—Å—Ç–∏':'–í–∞–º –∏–∑–≤–µ—Å—Ç–Ω–æ –ø–æ–Ω—è—Ç–∏–µ —ç–Ω–µ—Ä–≥–æ—Ü–µ–Ω–Ω–æ—Å—Ç—å?',
                    '–°—Ç–µ–ø–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è':'–ù–∞—Å–∫–æ–ª—å–∫–æ –≤—ã –≥–æ—Ç–æ–≤—ã –¥–æ–≤–µ—Ä–∏—Ç—å—Å—è –º–Ω–µ? (–ø–æ 10-–±–∞–ª–ª—å–Ω–æ–π —à–∫–∞–ª–µ)'}

all_questions_dict = {'questions_part_1':questions_part_1,
                      'questions_part_2':questions_part_2,
                      'questions_part_3':questions_part_3,
                      'questions_part_4':questions_part_4,
                      'questions_part_5':questions_part_5}

all_questions_WITH_ANSWERS_dict = copy.deepcopy(all_questions_dict)
for every_subdict in all_questions_WITH_ANSWERS_dict:
    for every in all_questions_WITH_ANSWERS_dict[every_subdict]:
        question_text = all_questions_WITH_ANSWERS_dict[every_subdict][every] = '–±–µ–∑ –æ—Ç–≤–µ—Ç–∞'



#—Ç–µ–∫—É—â–∞—è —á–∞—Å—Ç—å –∞–Ω–∫–µ—Ç—ã
def process_current_questions_part_status(arg):
    current_part_of_survey_status = f'({arg}/5)'
    return current_part_of_survey_status


#—Å–µ–∫—Ü–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–º–∏
button_main_agree = KeyboardButton('–î–∞, —Ö–æ—á—É')
button_main_disagree = KeyboardButton('–ù–µ—Ç, –Ω–µ —Ö–æ—á—É')
greet_kb = ReplyKeyboardMarkup(resize_keyboard=True)
greet_kb.row(button_main_agree, button_main_disagree)

#–≤—ã–≤–æ–¥–∏—Ç —á–∞—Å—Ç—å –∞–Ω–∫–µ—Ç—ã + –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏
def survey_part():
    global inline_button_questions_and_callbacks_dict
    inline_button_questions_and_callbacks_dict = {}
    inline_kb_survey = InlineKeyboardMarkup()
    if current_part_of_survey > 1:
        inline_kb_survey.add(InlineKeyboardButton(arrow_up_text, callback_data='prev_part_of_survey'))
    global questions_part
    questions_part = f'questions_part_{current_part_of_survey}'

    if current_part_of_survey == 1:
        questions_part = questions_part_1
    elif current_part_of_survey == 2:
        questions_part = questions_part_2
    elif current_part_of_survey == 3:
        questions_part = questions_part_3
    elif current_part_of_survey == 4:
        questions_part = questions_part_4
    elif current_part_of_survey == 5:
        questions_part = questions_part_5

    for index, (key, value) in enumerate(questions_part.items()):
        callback_data = f'question_{index}'
        button = InlineKeyboardButton(text=key, callback_data=callback_data)
        inline_button_questions_and_callbacks_dict.update({value: callback_data})
        inline_kb_survey.add(button)
    if current_part_of_survey < 5:
        inline_kb_survey.add(InlineKeyboardButton(text=arrow_down_text, callback_data='next_part_of_survey'))
    inline_kb_survey.add(InlineKeyboardButton(text=end_survey_text, callback_data='finish_survey'))
    return inline_kb_survey

#–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å "—Å–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏"
def fastest_way_to_answer_menu():
    keyboard = InlineKeyboardMarkup()
    for key, value in fastest_way_to_answer.items():
        keyboard.add(InlineKeyboardButton(text=key, callback_data=value))
    row = []
    for key, value in back_to_survey_buttons_dict.items():
        row.append(InlineKeyboardButton(text=key, callback_data=value))
        if len(row) == 2:
            keyboard.add(*row)
            row = []
    return keyboard

#–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –æ—Ç–≤–µ—Ç–∞–º–∏ "–¥–∞/–Ω–µ—Ç/—á–∞—Å—Ç–∏—á–Ω–æ"
def yes_no_partially_menu():
    keyboard = InlineKeyboardMarkup()
    row = []
    for key, value in yes_no_partially_buttons_dict.items():
        row.append(InlineKeyboardButton(text=key, callback_data=value))
        if len(row) == 3:
            keyboard.add(*row)
            row = []
    for key, value in back_to_survey_buttons_dict.items():
        row.append(InlineKeyboardButton(text=key, callback_data=value))
        if len(row) == 2:
            keyboard.add(*row)
            row = []
    return keyboard

#–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ "–∫–∞–∫–æ–π —Ç–∏–ø –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø—Ä–æ–¥–ø–æ—á—Ç–∏—Ç–µ–ª–µ–Ω"
def consultations_types_menu():
    keyboard = InlineKeyboardMarkup()
    for key, value in consultations_types.items():
        keyboard.add(InlineKeyboardButton(text=key, callback_data=value))
    row = []
    for key, value in back_to_survey_buttons_dict.items():
        row.append(InlineKeyboardButton(text=key, callback_data=value))
        if len(row) == 2:
            keyboard.add(*row)
            row = []
    return keyboard

#–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ "–ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —Å–ø–æ—Å–æ–± –æ–±—â–µ–Ω–∏—è"
def prefered_way_to_communicate_menu():
    keyboard = InlineKeyboardMarkup()
    for key, value in prefered_way_to_communicate.items():
        keyboard.add(InlineKeyboardButton(text=key, callback_data=value))
    row = []
    for key, value in back_to_survey_buttons_dict.items():
        row.append(InlineKeyboardButton(text=key, callback_data=value))
        if len(row) == 2:
            keyboard.add(*row)
            row = []
    return keyboard

#–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å —Å–æ —à–∫–∞–ª–æ–π (1-10)
def out_of_ten_scale_menu():
    keyboard = InlineKeyboardMarkup(row_width=5)
    row = []
    for key, value in out_of_ten_scale.items():
        row.append(InlineKeyboardButton(text=key, callback_data=value))
        if len(row) == 5:
            keyboard.add(*row)
            row = []
    for key, value in back_to_survey_buttons_dict.items():
        row.append(InlineKeyboardButton(text=key, callback_data=value))
        if len(row) == 2:
            keyboard.add(*row)
            row = []
    return keyboard

#–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ –≥—Ä—É–ø–ø–µ
async def check_if_chat_member(message, user_id):
    try:
        await bot.get_chat_member(chat_id, user_id)
        await bot.send_message(message.from_user.id, text="–í—ã —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ :)", reply_markup=main_menu())
    except:
        await bot.send_message(message.from_user.id, text="–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ :(", reply_markup=main_menu())
        return


#–ø—É—Å—Ç–æ–µ inline-–º–µ–Ω—é
def empty_menu():
    keyboard = InlineKeyboardMarkup()
    return keyboard

#–∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥ –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –æ–ø—Ä–æ—Å –ø–æ–¥ –∫–∞–∂–¥—ã–º –æ—Ç–¥–µ–ª—å–Ω—ã–º –≤–æ–ø—Ä–æ—Å–æ–º
def back_to_survey_kb():
    keyboard = InlineKeyboardMarkup()
    back_to_survey_buttons_dict = {back_to_survey_text: 'back_to_survey',
                                   end_survey_text: 'finish_survey'}
    row = []
    for key, value in back_to_survey_buttons_dict.items():
        row.append(InlineKeyboardButton(text=key, callback_data=value))
        if len(row) == 2:
            keyboard.add(*row)
            row = []
    return keyboard

#–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –≤–Ω–∏–∑—É
def main_menu():
    keyboard = ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    keyboard.add(*main_menu_buttons)
    if session.query(InformationAboutUsers).filter_by(is_owner=1):
        keyboard.add(KeyboardButton(text='–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'), (KeyboardButton(text='–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')))
    return keyboard


def services_menu():
    keyboard = InlineKeyboardMarkup()
    services_buttons_dict = {"–£—Å–ª—É–≥–∞ 1":'service_1',
                             "–£—Å–ª—É–≥–∞ 2":'service_2',
                             "–£—Å–ª—É–≥–∞ 3":'service_3'}
    for key, value in services_buttons_dict.items():
        keyboard.add(InlineKeyboardButton(text=key, callback_data=value))
    return keyboard


def contacts_menu():
    keyboard = InlineKeyboardMarkup()
    contacts_buttons_dict = {"–ö–æ–Ω—Ç–∞–∫—Ç 1":'contact_1',
                             "–ö–æ–Ω—Ç–∞–∫—Ç 2":'contact_2',
                             "–ö–æ–Ω—Ç–∞–∫—Ç 3":'contact_3'}
    for key, value in contacts_buttons_dict.items():
        keyboard.add(InlineKeyboardButton(text=key, callback_data=value))
    return keyboard

#–Ω–∞–π—Ç–∏ –∫–ª—é—á —Å–ª–æ–≤–∞—Ä—è –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é
def find_key_by_value(dictionary, value):
    for key, val in dictionary.items():
        if val == value:
            return key
    return None

#—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
def update_data(dict, data, current_part_of_survey, question):
    global all_questions_WITH_ANSWERS_dict
    answer_user = find_key_by_value(dict, data)
    questions_part = f'questions_part_{current_part_of_survey}'
    part_of_survey = all_questions_WITH_ANSWERS_dict.get(questions_part)
    key = find_key_by_value(all_questions_dict[questions_part], question)
    part_of_survey[key] = answer_user

#–æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –ø–æ–ª–Ω—É—é –∞–Ω–∫–µ—Ç—É
async def show_answered_full_survey(id):
    question_number_in_survey = 0
    survey_answers_list = '–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞\n'
    for key, value in all_questions_WITH_ANSWERS_dict.items():
        for question, answer in value.items():
            print()
            question_number_in_survey  += 1
            survey_answers_list+= f'{question_number_in_survey }.{question}\n"{all_questions_dict[key][question]}"\n–í–∞—à –æ—Ç–≤–µ—Ç: {answer}\n\n'
            if question_number_in_survey == 10:
                await bot.send_message(id, survey_answers_list)
                survey_answers_list = ''
    if survey_answers_list != '':
        await bot.send_message(id, survey_answers_list)


# def save_data_to_db():


@dp.message_handler(commands=commands)
async def process_start_command(message: types.Message):
    # –í—Å—Ç–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∑–∞–ø–∏—Å—å —Å –ø–æ–ª–µ–º 'id'
    global user_id
    user_id = message.from_user.id
    data_from_message = ['id', 'username', 'first_name', 'last_name']
    values = [getattr(message.from_user, column) for column in data_from_message]
    existing_user = session.query(InformationAboutUsers).filter_by(id=values[0]).first()
    if existing_user:
        existing_user.username = values[1]
        existing_user.first_name = values[2]
        existing_user.last_name = values[3]
        session.commit()
        await bot.send_message(message.chat.id, text=f'–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å id={values[0]} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.')
    else:
        user_info = InformationAboutUsers(id=values[0], username=values[1], first_name=values[2], last_name=values[3])
        session.add(user_info)
        session.commit()
        await bot.send_message(message.chat.id, text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id={values[0]} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.')
    await message.reply("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø - –±–æ—Ç, –∏ —è –ø–æ–º–æ–≥—É –í–∞–º —Å —Ç–µ–º, —á—Ç–æ –í–∞–º –Ω—É–∂–Ω–æ. "
                        "–ñ–µ–ª–∞–µ—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è?", reply_markup=greet_kb)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥"
@dp.message_handler(lambda message: message.text == main_menu_buttons[0], state="*")
async def process_services_menu(message: types.Message):
    await message.answer("–ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ —Å–ø–∏—Å–æ–∫ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥:", reply_markup=services_menu())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã"
@dp.message_handler(lambda message: message.text == main_menu_buttons[1], state="*")
async def process_contacts_menu(message: types.Message):
    await message.answer("–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:", reply_markup=contacts_menu())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç—ã"
@dp.message_handler(lambda message: message.text == main_menu_buttons[2], state="*")
async def show_survey_for_user(message: types.Message):
    await show_answered_full_survey(message.from_user.id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã"
@dp.message_handler(lambda message: message.text == main_menu_buttons[3], state="*")
async def process_edit_survey(message: types.Message):
    await bot.send_message(message.from_user.id, f'{process_current_questions_part_status(current_part_of_survey)} {survey_is_in_progress_text}',
                           reply_markup=survey_part())

@dp.message_handler(lambda message: message.text == main_menu_buttons_for_owners[0], state="*")
async def process_all_registered_users(message: types.Message):
    result = session.execute(select(InformationAboutUsers.id, InformationAboutUsers.username, InformationAboutUsers.first_name, InformationAboutUsers.last_name))
    all_registered_users = f"–í—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n"
    for index, row in enumerate(result):
        print(index)
        print(row)
        id_value = row[0]
        username_value = row[1]
        first_name_value = row[2]
        last_name_value = row[3]
        all_registered_users += f"{index + 1}. ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {id_value}\n"
        if username_value is not None:
            all_registered_users += f"Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{username_value}\n"
        else:
            all_registered_users += f'Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n'


        all_registered_users += f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤ Telegram): {first_name_value}\n"

        if last_name_value is not None:
            all_registered_users += f'–§–∞–º–∏–ª–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤ Telegram): {last_name_value}\n\n'
        else:
            all_registered_users += f'–§–∞–º–∏–ª–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤ Telegram): –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n\n'

        if (index + 1) % 50 == 0:
            await message.answer(text=all_registered_users, reply_markup=main_menu())
            all_registered_users = ''
        else:
            pass

    await message.answer(text=all_registered_users, reply_markup=main_menu())


@dp.message_handler(lambda message: message.text == main_menu_buttons_for_owners[1], state="*")
async def process_contacts_menu(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞–Ω–∫–µ—Ç—É –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã –∂–µ–ª–∞–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å:", reply_markup=main_menu())


#–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –≤—ã–±–æ—Ä–∞ (–ø—Ä–æ—Ö–æ–¥–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∏–ª–∏ –Ω–µ—Ç)
@dp.message_handler()
async def process_start_command(message: types.Message):
    global current_part_of_survey
    current_part_of_survey = 0
    current_part_of_survey += 1
    if message.text == '–î–∞, —Ö–æ—á—É':
        await bot.send_message(message.from_user.id, f'{process_current_questions_part_status(current_part_of_survey)} {survey_is_in_progress_text}',
                               reply_markup=survey_part())

    elif message.text == '–ù–µ—Ç, –Ω–µ —Ö–æ—á—É':
        await bot.send_message(message.from_user.id, main_menu_text, reply_markup=main_menu())







#–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ inline-–º–µ–Ω—é –∞–Ω–∫–µ—Ç—ã
@dp.callback_query_handler(lambda c: c.data.startswith('question_'), state='*')
async def process_question(callback_query: types.CallbackQuery, state: FSMContext):
    question_number = int(callback_query.data.split('_')[1])
    global question
    question = find_key_by_value(inline_button_questions_and_callbacks_dict, callback_query.data)
    await Form.waiting_for_answer.set()
    await state.update_data(question=question, question_number=question_number)
    if  '–í–∞—à –≤–æ–ø—Ä–æ—Å –∫–∞—Å–∞–µ—Ç—Å—è' in question:
        await callback_query.message.edit_text(
            question,
            reply_markup=yes_no_partially_menu())
    elif '–±—ã—Å—Ç—Ä–µ–µ –≤—Å–µ–≥–æ' in question:
        await callback_query.message.edit_text(
            question,
            reply_markup=fastest_way_to_answer_menu())
    elif '–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏' in question:
        await callback_query.message.edit_text(
            question,
            reply_markup=consultations_types_menu())
    elif '–≤–∏–¥ –æ–±—â–µ–Ω–∏—è' in question:
        await callback_query.message.edit_text(
            question,
            reply_markup=prefered_way_to_communicate_menu())
    elif '—ç–Ω–µ—Ä–≥–æ—Ü–µ–Ω–Ω–æ—Å—Ç—å' in question:
        await callback_query.message.edit_text(
            question,
            reply_markup=yes_no_partially_menu())
    elif '–ø–æ 10-–±–∞–ª–ª—å–Ω–æ–π —à–∫–∞–ª–µ' in question:
        await callback_query.message.edit_text(
            question,
            reply_markup=out_of_ten_scale_menu())
    # elif '–ü–æ–¥–ø–∏—Å–∞–Ω—ã' in question:
    #     await callback_query.message.edit_text(
    #         question,
    #         reply_markup=check_if_chat_member_menu())
    else:
        await callback_query.message.edit_text(
            question,
            reply_markup=back_to_survey_kb())

    async with state.proxy() as data:
        data['question_message_id'] = callback_query.message.message_id


#–æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—é—â–∏–µ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
@dp.message_handler(state='*')
async def process_answer(message: types.Message, state: FSMContext):
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    answer = message.text
    async with state.proxy() as data:
        question = data['question']
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    if message.text in main_menu_buttons or message.text[1:] in commands:
        return
    if question:
        if question not in random_answer_expected_questions:
            return
        if 'question_message_id' in data:
            await bot.edit_message_text(text="–û—Ç–∫—Ä—ã—Ç–æ –±–æ–ª–µ–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
                                        chat_id=message.chat.id,
                                        message_id=data['question_message_id'],
                                        reply_markup=empty_menu())
        await message.answer(f'–í–∞—à –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å "{find_key_by_value(questions_part, question)}": "{answer}". '
                             f'–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "{end_survey_text[2:]}".',
                         reply_markup=survey_part())
        global all_questions_WITH_ANSWERS_dict
        #—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ —Å–ª–æ–≤–∞—Ä—å
        answers_questions_part = f'questions_part_{current_part_of_survey}'
        key = find_key_by_value(all_questions_dict[answers_questions_part], question)
        all_questions_WITH_ANSWERS_dict[answers_questions_part][key] = answer
        await Form.waiting_for_question.set()
        async with state.proxy() as data:
            data['question'] = None
        return



#–æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å "–ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥ –æ–±—â–µ–Ω–∏—è"
@dp.callback_query_handler(lambda c: find_key_by_value(prefered_way_to_communicate, c.data), state="*")
async def process_back_to_survey(callback_query: types.CallbackQuery):
    update_data(prefered_way_to_communicate, callback_query.data, current_part_of_survey, question)
    await callback_query.answer()
    await bot.edit_message_text(
        f'{process_current_questions_part_status(current_part_of_survey)} –í–∞—à –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å "{question}":'
        f' "{find_key_by_value(prefered_way_to_communicate, callback_query.data)}". '
        f'–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "{end_survey_text[2:]}".',
        callback_query.from_user.id,
        callback_query.message.message_id,
        reply_markup=survey_part())


#–æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å "–∫–∞–∫–æ–π —Ç–∏–ø –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç"
@dp.callback_query_handler(lambda c: find_key_by_value(consultations_types, c.data), state="*")
async def process_back_to_survey(callback_query: types.CallbackQuery):
    update_data(consultations_types, callback_query.data, current_part_of_survey, question)
    await callback_query.answer()
    await bot.edit_message_text(
        f'{process_current_questions_part_status(current_part_of_survey)} –í–∞—à –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å "{question}":'
        f' "{find_key_by_value(consultations_types, callback_query.data)}". '
        f'–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "{end_survey_text[2:]}".',
        callback_query.from_user.id,
        callback_query.message.message_id,
        reply_markup=survey_part())


#–æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å "–Ω–∞–∏–±–æ–ª–µ–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏"
@dp.callback_query_handler(lambda c: find_key_by_value(fastest_way_to_answer, c.data), state="*")
async def process_back_to_survey(callback_query: types.CallbackQuery):
    update_data(fastest_way_to_answer, callback_query.data, current_part_of_survey, question)
    await callback_query.answer()
    await bot.edit_message_text(
        f'{process_current_questions_part_status(current_part_of_survey)} –í–∞—à –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å "{question}":'
        f' "{find_key_by_value(fastest_way_to_answer, callback_query.data)}". '
        f'–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "{end_survey_text[2:]}".',
        callback_query.from_user.id,
        callback_query.message.message_id,
        reply_markup=survey_part())

#–æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å —Å–æ —à–∫–∞–ª–æ–π
@dp.callback_query_handler(lambda c: find_key_by_value(out_of_ten_scale, c.data), state="*")
async def process_back_to_survey(callback_query: types.CallbackQuery):
    update_data(out_of_ten_scale, callback_query.data, current_part_of_survey, question)
    await callback_query.answer()
    await bot.edit_message_text(
        f'{process_current_questions_part_status(current_part_of_survey)} –í–∞—à –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å "{question}":'
        f' "{find_key_by_value(out_of_ten_scale, callback_query.data)}". '
        f'–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "{end_survey_text[2:]}".',
        callback_query.from_user.id,
        callback_query.message.message_id,
        reply_markup=survey_part())

#–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ "–¥–∞/–Ω–µ—Ç/—á–∞—Å—Ç–∏—á–Ω–æ"
@dp.callback_query_handler(lambda c: c.data == 'answer_yes_button'
                                     or c.data == 'answer_no_button'
                                     or c.data == 'answer_partially_button'
                                     or c.data in consultations_types, state="*")
async def process_back_to_survey(callback_query: types.CallbackQuery):
    update_data(yes_no_partially_buttons_dict, callback_query.data, current_part_of_survey, question)
    await callback_query.answer()
    await bot.edit_message_text(
        f'{process_current_questions_part_status(current_part_of_survey)} –í–∞—à –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å "{question}":'
        f' "{find_key_by_value(yes_no_partially_buttons_dict, callback_query.data)}". '
        f'–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "{end_survey_text[2:]}".',
        callback_query.from_user.id,
        callback_query.message.message_id,
        reply_markup=survey_part())


#–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥" –∏–∑ –≤–æ–ø—Ä–æ—Å–∞
@dp.callback_query_handler(lambda c: c.data == 'back_to_survey', state="*")
async def process_back_to_survey(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await bot.edit_message_text(f'{process_current_questions_part_status(current_part_of_survey)} {survey_is_in_progress_text}',
                                callback_query.from_user.id,
                                callback_query.message.message_id,
                                reply_markup=survey_part())

#—Å—Ç—Ä–µ–ª–∫–∞ –≤ –ø—Ä–µ–¥—ã–¥—É—â—É—é —á–∞—Å—Ç—å –∞–Ω–∫–µ—Ç—ã
@dp.callback_query_handler(lambda c: c.data == 'prev_part_of_survey', state="*")
async def process_prev_part_of_survey(callback_query: types.CallbackQuery):
    global current_part_of_survey
    current_part_of_survey -= 1
    await callback_query.answer()
    await bot.edit_message_text(f"{process_current_questions_part_status(current_part_of_survey)} {survey_is_in_progress_text}",
                                callback_query.from_user.id,
                                callback_query.message.message_id,
                                reply_markup=survey_part())

#—Å—Ç—Ä–µ–ª–∫–∞ –≤ —Å–ª–µ–¥—É—é—â—É—é —á–∞—Å—Ç—å –∞–Ω–∫–µ—Ç—ã
@dp.callback_query_handler(lambda c: c.data == 'next_part_of_survey', state="*")
async def process_next_part_of_survey(callback_query: types.CallbackQuery):
    global current_part_of_survey
    current_part_of_survey += 1
    await callback_query.answer()
    await bot.edit_message_text(f"{process_current_questions_part_status(current_part_of_survey)} {survey_is_in_progress_text}",
                                callback_query.from_user.id,
                                callback_query.message.message_id,
                                reply_markup=survey_part())


#–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
@dp.callback_query_handler(lambda c: c.data == 'finish_survey', state="*")
async def process_finish_survey(callback_query: types.CallbackQuery):
    # if user_in_group is False:
    #     await bot.send_message(callback_query.from_user.id, '–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞ –º–æ—é –≥—Ä—É–ø–ø—É. –¢–∞–º –í—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ!\nhttps://t.me/+kx-uithPXXA3MWQy')
    #
    # else:
    #     pass
    await check_if_chat_member(callback_query, callback_query.from_user.id)
    await bot.edit_message_text(survey_is_finished_text,
                            callback_query.from_user.id,
                            callback_query.message.message_id)
    await bot.send_message(callback_query.from_user.id, main_menu_text, reply_markup=main_menu())


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)